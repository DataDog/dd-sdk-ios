# ----------------------------------
# API surface for DatadogCore:
# ----------------------------------

public let DatadogNTPServers = ["0.datadog.pool.ntp.org","1.datadog.pool.ntp.org","2.datadog.pool.ntp.org","3.datadog.pool.ntp.org"]
public protocol ServerDateProvider
    func synchronize(update: @escaping (TimeInterval) -> Void)
public protocol DataEncryption
    func encrypt(data: Data) throws -> Data
    func decrypt(data: Data) throws -> Data
[?] extension InternalExtension where ExtendedType == Datadog
    public static var telemetry: _TelemetryProxy
    public static func set(customVersion: String)
public struct _TelemetryProxy
    public func debug(id: String, message: String)
    public func error(id: String, message: String, kind: String?, stack: String?)
[?] extension InternalExtension where ExtendedType == Datadog.Configuration
    public var additionalConfiguration: [String: Any]
public enum Datadog
    public static var verbosityLevel: CoreLoggerLevel?
    public static func isInitialized(instanceName name: String = CoreRegistry.defaultInstanceName) -> Bool
    public static func sdkInstance(named name: String) -> DatadogCoreProtocol
    public static func setUserInfo(id: String,name: String? = nil,email: String? = nil,extraInfo: [AttributeKey: AttributeValue] = [:],in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func addUserExtraInfo(_ extraInfo: [AttributeKey: AttributeValue?],in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func clearUserInfo(in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func setAccountInfo(id: String,name: String? = nil,extraInfo: [AttributeKey: AttributeValue] = [:],in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func addAccountExtraInfo(_ extraInfo: [AttributeKey: AttributeValue?],in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func clearAccountInfo(in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func set(trackingConsent: TrackingConsent, in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func clearAllData(in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func stopInstance(named instanceName: String = CoreRegistry.defaultInstanceName)
    public static func initialize(with configuration: Configuration,trackingConsent: TrackingConsent,instanceName: String = CoreRegistry.defaultInstanceName) -> DatadogCoreProtocol
[?] extension Datadog
    public struct Configuration
        public enum BatchSize: CaseIterable
            case small
            case medium
            case large
        public enum UploadFrequency: CaseIterable
            case frequent
            case average
            case rare
        public enum BatchProcessingLevel: CaseIterable
            case low
            case medium
            case high
        public var clientToken: String
        public var env: String
        public var site: DatadogSite
        public var service: String?
        public var batchSize: BatchSize
        public var uploadFrequency: UploadFrequency
        public var proxyConfiguration: [AnyHashable: Any]?
        public var encryption: DataEncryption?
        public var serverDateProvider: ServerDateProvider
        public var bundle: Bundle
        public var batchProcessingLevel: BatchProcessingLevel
        public var backgroundTasksEnabled: Bool
        public init(clientToken: String,env: String,site: DatadogSite = .us1,service: String? = nil,bundle: Bundle = .main,batchSize: BatchSize = .medium,uploadFrequency: UploadFrequency = .average,proxyConfiguration: [AnyHashable: Any]? = nil,encryption: DataEncryption? = nil,serverDateProvider: ServerDateProvider? = nil,batchProcessingLevel: BatchProcessingLevel = .medium,backgroundTasksEnabled: Bool = false)

# ----------------------------------
# API surface for DatadogLogs:
# ----------------------------------

public struct LogEvent: Encodable
    public enum Status: String, Encodable, CaseIterable, Equatable
        case debug
        case info
        case notice
        case warn
        case error
        case critical
        case emergency
    public struct Attributes
        public var userAttributes: [String: Encodable]
    public struct Error
        public struct BinaryImage: Codable
            public let arch: String?
            public let isSystem: Bool
            public let loadAddress: String?
            public let maxAddress: String?
            public let name: String
            public let uuid: String
        public var kind: String?
        public var message: String?
        public var stack: String?
        public var sourceType: String = "ios"
        public var fingerprint: String?
        public var binaryImages: [BinaryImage]?
    public struct Dd: Codable
        public struct Device: Codable
            public let architecture: String
        public let device: Device
    public let date: Date
    public let status: Status
    public var message: String
    public var error: Error?
    public let serviceName: String
    public let environment: String
    public let loggerName: String
    public let loggerVersion: String
    public let threadName: String?
    public let applicationVersion: String
    public let applicationBuildNumber: String
    public let buildId: String?
    public let variant: String?
    public let dd: Dd
    public let device: Device
    public let os: OperatingSystem
    public var userInfo: UserInfo
    public var accountInfo: AccountInfo?
    public let networkConnectionInfo: NetworkConnectionInfo?
    public let mobileCarrierInfo: CarrierInfo?
    public var attributes: LogEvent.Attributes
    public var tags: [String]?
    public func encode(to encoder: Encoder) throws
public struct Logger
    public struct Configuration
        public enum ConsoleLogFormat
            case short
            case shortWith(prefix: String)
        public var service: String?
        public var name: String?
        public var networkInfoEnabled: Bool
        public var bundleWithRumEnabled: Bool
        public var bundleWithTraceEnabled: Bool
        public var remoteSampleRate: Float
        public var remoteLogThreshold: LogLevel
        public var consoleLogFormat: ConsoleLogFormat?
        public init(service: String? = nil,name: String? = nil,networkInfoEnabled: Bool = false,bundleWithRumEnabled: Bool = true,bundleWithTraceEnabled: Bool = true,remoteSampleRate: Float = .maxSampleRate,remoteLogThreshold: LogLevel = .debug,consoleLogFormat: ConsoleLogFormat? = nil)
    public static func create(with configuration: Configuration = .init(),in core: DatadogCoreProtocol = CoreRegistry.default) -> LoggerProtocol
public protocol InternalLoggerProtocol
    func log(level: LogLevel,message: String,errorKind: String?,errorMessage: String?,stackTrace: String?,attributes: [String: Encodable]?)
    func critical(message: String,error: Error?,attributes: [String: Encodable]?,completionHandler: @escaping CompletionHandler)
[?] extension LoggerProtocol
    public var _internal: InternalLoggerProtocol
public enum LogLevel: Int, Codable
    case debug
    case info
    case notice
    case warn
    case error
    case critical
[?] extension CoreLoggerLevel
    public init(logLevel: LogLevel)
public protocol LoggerProtocol: Sendable
    func log(level: LogLevel, message: String, error: Error?, attributes: [String: Encodable]?)
    func addAttribute(forKey key: AttributeKey, value: AttributeValue)
    func removeAttribute(forKey key: AttributeKey)
    func addTag(withKey key: String, value: String)
    func removeTag(withKey key: String)
    func add(tag: String)
    func remove(tag: String)
public extension LoggerProtocol
    func debug(_ message: String, error: Error? = nil, attributes: [AttributeKey: AttributeValue]? = nil)
    func info(_ message: String, error: Error? = nil, attributes: [AttributeKey: AttributeValue]? = nil)
    func notice(_ message: String, error: Error? = nil, attributes: [AttributeKey: AttributeValue]? = nil)
    func warn(_ message: String, error: Error? = nil, attributes: [AttributeKey: AttributeValue]? = nil)
    func error(_ message: String, error: Error? = nil, attributes: [AttributeKey: AttributeValue]? = nil)
    func critical(_ message: String, error: Error? = nil, attributes: [AttributeKey: AttributeValue]? = nil)
[?] extension InternalExtension where ExtendedType == Logs
    public static func isEnabled(in core: DatadogCoreProtocol = CoreRegistry.default) -> Bool
public enum Logs
    public struct Configuration
        public typealias EventMapper = (LogEvent) -> LogEvent?
        public var eventMapper: EventMapper?
        public var customEndpoint: URL?
        public init(eventMapper: EventMapper? = nil,customEndpoint: URL? = nil)
    public static func enable(with configuration: Logs.Configuration = .init(),in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func addAttribute(forKey key: AttributeKey, value: AttributeValue, in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func removeAttribute(forKey key: AttributeKey, in core: DatadogCoreProtocol = CoreRegistry.default)
[?] extension Logs
    public struct Attributes
        public static let errorFingerprint = "_dd.error.fingerprint"
[?] extension InternalExtension where ExtendedType == Logs.Configuration
    public mutating func setLogEventMapper(_ mapper: LogEventMapper)
public protocol LogEventMapper
    func map(event: LogEvent, callback: @escaping (LogEvent) -> Void)

# ----------------------------------
# API surface for DatadogTrace:
# ----------------------------------

[?] extension TracePropagationHeadersWriter where Self: OTFormatWriter
    public func inject(spanContext: OTSpanContext)
[?] extension TracePropagationHeadersReader where Self: OTFormatReader
    public func extract() -> OTSpanContext?
[?] extension OpenTelemetryApi.TraceState
    public func w3c() -> String
public class OTelTracerProvider: OpenTelemetryApi.TracerProvider
    public init(in core: DatadogCoreProtocol = CoreRegistry.default)
    public func get(instrumentationName: String, instrumentationVersion: String?) -> OpenTelemetryApi.Tracer
public struct OTTags
    public static let component = "component"
    public static let dbInstance = "db.instance"
    public static let dbStatement = "db.statement"
    public static let dbType = "db.type"
    public static let dbUser = "db.user"
    public static let error = "error"
    public static let httpMethod = "http.method"
    public static let httpStatusCode = "http.status_code"
    public static let httpUrl = "http.url"
    public static let messageBusDestination = "message_bus.destination"
    public static let peerAddress = "peer.address"
    public static let peerHostname = "peer.hostname"
    public static let peerIPv4 = "peer.ipv4"
    public static let peerIPv6 = "peer.ipv6"
    public static let peerPort = "peer.port"
    public static let peerService = "peer.service"
    public static let samplingPriority = "sampling.priority"
    public static let spanKind = "span.kind"
public struct OTLogFields
    public static let errorKind = "error.kind"
    public static let event = "event"
    public static let message = "message"
    public static let stack = "stack"
public protocol OTFormatReader: OTCustomFormatReader
public protocol OTFormatWriter: OTCustomFormatWriter
public protocol OTTextMapReader: OTFormatReader
public protocol OTTextMapWriter: OTFormatWriter
public protocol OTHTTPHeadersReader: OTTextMapReader
public protocol OTHTTPHeadersWriter: OTTextMapWriter
public protocol OTCustomFormatReader
    func extract() -> OTSpanContext?
public protocol OTCustomFormatWriter
    func inject(spanContext: OTSpanContext)
public struct OTReference
    public let type: OTReferenceType
    public let context: OTSpanContext
    public static func child(of parent: OTSpanContext) -> OTReference
    public static func follows(from precedingContext: OTSpanContext) -> OTReference
public enum OTReferenceType: String
    case childOf = "CHILD_OF"
    case followsFrom = "FOLLOWS_FROM"
public protocol OTSpan
    var context: OTSpanContext
    func tracer() -> OTTracer
    func setOperationName(_ operationName: String)
    func setTag(key: String, value: Encodable)
    func log(fields: [String: Encodable], timestamp: Date)
    func setBaggageItem(key: String, value: String)
    func baggageItem(withKey key: String) -> String?
    func finish(at time: Date)
    func setActive() -> OTSpan
public extension OTSpan
    func log(fields: [String: Encodable])
    func finish()
public extension OTSpan
    func setError(_ error: Error,file: StaticString = #fileID,line: UInt = #line)
    func setError(kind: String,message: String,stack: String = "",file: StaticString = #fileID,line: UInt = #line)
public protocol OTSpanContext
    func forEachBaggageItem(callback: (_ key: String, _ value: String) -> Bool)
public protocol OTTracer
    func startSpan(operationName: String,references: [OTReference]?,tags: [String: Encodable]?,startTime: Date?) -> OTSpan
    func startRootSpan(operationName: String,tags: [String: Encodable]?,startTime: Date?,customSamplingRate: SampleRate?) -> OTSpan
    func inject(spanContext: OTSpanContext, writer: OTFormatWriter)
    func extract(reader: OTFormatReader) -> OTSpanContext?
    var activeSpan: OTSpan?
public extension OTTracer
    func startSpan(operationName: String,childOf parent: OTSpanContext? = nil,tags: [String: Encodable]? = nil,startTime: Date? = nil) -> OTSpan
    func startRootSpan(operationName: String,tags: [String: Encodable]? = nil,startTime: Date? = nil,customSamplingRate: SampleRate? = nil) -> OTSpan
public typealias SpanEventMapper = (SpanEvent) -> SpanEvent
public struct SpanEvent: Encodable
    public var operationName: String
    public let serviceName: String
    public var resource: String
    public let startTime: Date
    public let duration: TimeInterval
    public let isError: Bool
    public let tracerVersion: String
    public let applicationVersion: String
    public let networkConnectionInfo: NetworkConnectionInfo?
    public let mobileCarrierInfo: CarrierInfo?
    public let device: Device
    public let os: OperatingSystem
    public struct UserInfo
        public let id: String?
        public let name: String?
        public let email: String?
        public var extraInfo: [String: String]
    public struct AccountInfo
        public let id: String
        public let name: String?
        public var extraInfo: [String: String]
    public var userInfo: UserInfo
    public var accountInfo: AccountInfo?
    public var tags: [String: String]
    public func encode(to encoder: Encoder) throws
public enum Trace
    public static func enable(with configuration: Trace.Configuration = .init(), in core: DatadogCoreProtocol = CoreRegistry.default)
[?] extension Trace
    public struct Configuration: SampledTelemetry
        public typealias EventMapper = (SpanEvent) -> SpanEvent
        public var sampleRate: SampleRate
        public var service: String?
        public var tags: [String: Encodable]?
        public var urlSessionTracking: URLSessionTracking?
        public var bundleWithRumEnabled: Bool
        public var networkInfoEnabled: Bool
        public var eventMapper: EventMapper?
        public var customEndpoint: URL?
        public struct URLSessionTracking
            public var firstPartyHostsTracing: FirstPartyHostsTracing
            public enum FirstPartyHostsTracing
                case trace(hosts: Set<String>,sampleRate: Float = .maxSampleRate,traceControlInjection: TraceContextInjection = .sampled)
                case traceWithHeaders(hostsWithHeaders: [String: Set<TracingHeaderType>],sampleRate: Float = .maxSampleRate,traceControlInjection: TraceContextInjection = .sampled)
            public init(firstPartyHostsTracing: FirstPartyHostsTracing)
        public init(sampleRate: SampleRate = .maxSampleRate,service: String? = nil,tags: [String: Encodable]? = nil,urlSessionTracking: URLSessionTracking? = nil,bundleWithRumEnabled: Bool = true,networkInfoEnabled: Bool = false,eventMapper: EventMapper? = nil,customEndpoint: URL? = nil)
public enum SpanTags
    public static let resource = "resource.name"
    public static let operation = "operation.name"
    public static let service = "service.name"
public class Tracer
    public static func shared(in core: DatadogCoreProtocol = CoreRegistry.default) -> OTTracer

# ----------------------------------
# API surface for DatadogRUM:
# ----------------------------------

public struct RUMAction
    public var name: String
    public var attributes: [AttributeKey: AttributeValue]
    public init(name: String, attributes: [AttributeKey: AttributeValue] = [:])
public extension SwiftUI.View
    func trackRUMTapAction(name: String,attributes: [String: Encodable] = [:],count: Int = 1,in core: DatadogCoreProtocol = CoreRegistry.default) -> some View
public protocol SwiftUIRUMActionsPredicate
    func rumAction(with componentName: String) -> RUMAction?
public struct DefaultSwiftUIRUMActionsPredicate
    public init(isLegacyDetectionEnabled: Bool)
[?] extension DefaultSwiftUIRUMActionsPredicate: SwiftUIRUMActionsPredicate
    public func rumAction(with componentName: String) -> RUMAction?
public typealias UIKitRUMActionsPredicate = UITouchRUMActionsPredicate
public protocol UITouchRUMActionsPredicate
    func rumAction(targetView: UIView) -> RUMAction?
public protocol UIPressRUMActionsPredicate
    func rumAction(press type: UIPress.PressType, targetView: UIView) -> RUMAction?
public struct DefaultUIKitRUMActionsPredicate
    public init ()
[?] extension DefaultUIKitRUMActionsPredicate: UITouchRUMActionsPredicate
    public func rumAction(targetView: UIView) -> RUMAction?
[?] extension DefaultUIKitRUMActionsPredicate: UIPressRUMActionsPredicate
    public func rumAction(press type: UIPress.PressType, targetView: UIView) -> RUMAction?
public struct RUMView
    public var name: String
    public var path: String?
    public var attributes: [AttributeKey: AttributeValue]
    public var isUntrackedModal: Bool
    public init(name: String, attributes: [AttributeKey: AttributeValue] = [:], isUntrackedModal: Bool = false)
public protocol SwiftUIRUMViewsPredicate
    func rumView(for extractedViewName: String) -> RUMView?
public struct DefaultSwiftUIRUMViewsPredicate: SwiftUIRUMViewsPredicate
    public init()
    public func rumView(for extractedViewName: String) -> RUMView?
public extension SwiftUI.View
    func trackRUMView(name: String,attributes: [AttributeKey: AttributeValue] = [:],in core: DatadogCoreProtocol = CoreRegistry.default) -> some View
public protocol UIKitRUMViewsPredicate
    func rumView(for viewController: UIViewController) -> RUMView?
public struct DefaultUIKitRUMViewsPredicate: UIKitRUMViewsPredicate
    public init ()
    public func rumView(for viewController: UIViewController) -> RUMView?
[?] extension InternalExtension where ExtendedType == RUM
    public static func isEnabled(in core: DatadogCoreProtocol = CoreRegistry.default) -> Bool
    public static func enableURLSessionTracking(with configuration: RUM.Configuration.URLSessionTracking,in core: DatadogCoreProtocol = CoreRegistry.default) throws
public enum RUM
    public static func enable(with configuration: RUM.Configuration,in core: DatadogCoreProtocol = CoreRegistry.default)
[?] extension RUM
    public struct Attributes
        public static let errorFingerprint = "_dd.error.fingerprint"
[?] extension RUM
    public typealias ViewEventMapper = (RUMViewEvent) -> RUMViewEvent
    public typealias ResourceEventMapper = (RUMResourceEvent) -> RUMResourceEvent?
    public typealias ErrorEventMapper = (RUMErrorEvent) -> RUMErrorEvent?
    public typealias ActionEventMapper = (RUMActionEvent) -> RUMActionEvent?
    public typealias LongTaskEventMapper = (RUMLongTaskEvent) -> RUMLongTaskEvent?
    public typealias SessionListener = (String, Bool) -> Void
    public typealias ResourceAttributesProvider = (URLRequest, URLResponse?, Data?, Error?) -> [AttributeKey: AttributeValue]?
    public struct Configuration
        public let applicationID: String
        public var sessionSampleRate: Float
        public var uiKitViewsPredicate: UIKitRUMViewsPredicate?
        public var uiKitActionsPredicate: UIKitRUMActionsPredicate?
        public var swiftUIViewsPredicate: SwiftUIRUMViewsPredicate?
        public var swiftUIActionsPredicate: SwiftUIRUMActionsPredicate?
        public var urlSessionTracking: URLSessionTracking?
        public var trackFrustrations: Bool
        public var trackBackgroundEvents: Bool
        public var trackWatchdogTerminations: Bool
        public var longTaskThreshold: TimeInterval?
        public var appHangThreshold: TimeInterval?
        public var vitalsUpdateFrequency: VitalsFrequency?
        public var networkSettledResourcePredicate: NetworkSettledResourcePredicate
        public var nextViewActionPredicate: NextViewActionPredicate?
        public var viewEventMapper: RUM.ViewEventMapper?
        public var resourceEventMapper: RUM.ResourceEventMapper?
        public var actionEventMapper: RUM.ActionEventMapper?
        public var errorEventMapper: RUM.ErrorEventMapper?
        public var longTaskEventMapper: RUM.LongTaskEventMapper?
        public var onSessionStart: RUM.SessionListener?
        public var customEndpoint: URL?
        public var trackAnonymousUser: Bool
        public var trackMemoryWarnings: Bool
        public var telemetrySampleRate: SampleRate
        public var collectAccessibility: Bool
        public var featureFlags: FeatureFlags
        public struct URLSessionTracking
            public var firstPartyHostsTracing: FirstPartyHostsTracing?
            public var resourceAttributesProvider: RUM.ResourceAttributesProvider?
        public enum VitalsFrequency: String
            case frequent
            case average
            case rare
[?] extension RUM.Configuration.URLSessionTracking
    public enum FirstPartyHostsTracing
        case trace(hosts: Set<String>,sampleRate: Float = .maxSampleRate,traceControlInjection: TraceContextInjection = .sampled)
        case traceWithHeaders(hostsWithHeaders: [String: Set<TracingHeaderType>],sampleRate: Float = .maxSampleRate,traceControlInjection: TraceContextInjection = .sampled)
    public init(firstPartyHostsTracing: RUM.Configuration.URLSessionTracking.FirstPartyHostsTracing? = nil,resourceAttributesProvider: RUM.ResourceAttributesProvider? = nil)
[?] extension RUM.Configuration
    public init(applicationID: String,sessionSampleRate: SampleRate = .maxSampleRate,uiKitViewsPredicate: UIKitRUMViewsPredicate? = nil,uiKitActionsPredicate: UIKitRUMActionsPredicate? = nil,swiftUIViewsPredicate: SwiftUIRUMViewsPredicate? = nil,swiftUIActionsPredicate: SwiftUIRUMActionsPredicate? = nil,urlSessionTracking: URLSessionTracking? = nil,trackFrustrations: Bool = true,trackBackgroundEvents: Bool = false,longTaskThreshold: TimeInterval? = 0.1,appHangThreshold: TimeInterval? = nil,trackWatchdogTerminations: Bool = false,vitalsUpdateFrequency: VitalsFrequency? = .average,networkSettledResourcePredicate: NetworkSettledResourcePredicate = TimeBasedTNSResourcePredicate(),nextViewActionPredicate: NextViewActionPredicate? = TimeBasedINVActionPredicate(),viewEventMapper: RUM.ViewEventMapper? = nil,resourceEventMapper: RUM.ResourceEventMapper? = nil,actionEventMapper: RUM.ActionEventMapper? = nil,errorEventMapper: RUM.ErrorEventMapper? = nil,longTaskEventMapper: RUM.LongTaskEventMapper? = nil,onSessionStart: RUM.SessionListener? = nil,customEndpoint: URL? = nil,trackAnonymousUser: Bool = true,trackMemoryWarnings: Bool = true,telemetrySampleRate: SampleRate = 20,collectAccessibility: Bool = false,featureFlags: FeatureFlags = .defaults)
[?] extension InternalExtension where ExtendedType == RUM.Configuration
    public var configurationTelemetrySampleRate: Float
[?] extension RUM.Configuration
    public typealias FeatureFlags = [FeatureFlag: Bool]
    public enum FeatureFlag: String
        case viewHitches
[?] extension RUM.Configuration.FeatureFlags
    public static var defaults: Self
    public subscript(flag: Key) -> Bool
public struct TNSResourceParams
    public let url: String
    public let timeSinceViewStart: TimeInterval
    public let viewName: String
public protocol NetworkSettledResourcePredicate
    func isInitialResource(from resourceParams: TNSResourceParams) -> Bool
public struct TimeBasedTNSResourcePredicate: NetworkSettledResourcePredicate
    public static let defaultThreshold: TimeInterval = 0.1
    public init(threshold: TimeInterval = TimeBasedTNSResourcePredicate.defaultThreshold)
    public func isInitialResource(from resourceParams: TNSResourceParams) -> Bool
public struct INVActionParams
    public let type: RUMActionType
    public let name: String
    public let timeToNextView: TimeInterval
    public let nextViewName: String
public protocol NextViewActionPredicate
    func isLastAction(from actionParams: INVActionParams) -> Bool
public struct TimeBasedINVActionPredicate: NextViewActionPredicate
    public static let defaultMaxTimeToNextView: TimeInterval = 3
    public init(maxTimeToNextView: TimeInterval = TimeBasedINVActionPredicate.defaultMaxTimeToNextView)
    public func isLastAction(from actionParams: INVActionParams) -> Bool
public class RUMMonitor
    public static func shared(in core: DatadogCoreProtocol = CoreRegistry.default) -> RUMMonitorProtocol
public extension RUMMonitorProtocol
    func startView(viewController: UIViewController,name: String? = nil,attributes: [AttributeKey: AttributeValue] = [:])
    func stopView(viewController: UIViewController,attributes: [AttributeKey: AttributeValue] = [:])
    func startView(key: String,name: String? = nil,attributes: [AttributeKey: AttributeValue] = [:])
    func stopView(key: String,attributes: [AttributeKey: AttributeValue] = [:])
    func addError(message: String,type: String? = nil,stack: String? = nil,source: RUMErrorSource = .custom,attributes: [AttributeKey: AttributeValue] = [:],file: StaticString? = #fileID,line: UInt? = #line)
    func addError(error: Error,source: RUMErrorSource = .custom,attributes: [AttributeKey: AttributeValue] = [:])
    func startResource(resourceKey: String,request: URLRequest,attributes: [AttributeKey: AttributeValue] = [:])
    func startResource(resourceKey: String,url: URL,attributes: [AttributeKey: AttributeValue] = [:])
    func startResource(resourceKey: String,httpMethod: RUMMethod,urlString: String,attributes: [AttributeKey: AttributeValue] = [:])
    func addResourceMetrics(resourceKey: String,metrics: URLSessionTaskMetrics,attributes: [AttributeKey: AttributeValue] = [:])
    func stopResource(resourceKey: String,response: URLResponse,size: Int64? = nil,attributes: [AttributeKey: AttributeValue] = [:])
    func stopResource(resourceKey: String,statusCode: Int? = nil,kind: RUMResourceType,size: Int64? = nil,attributes: [AttributeKey: AttributeValue] = [:])
    func stopResourceWithError(resourceKey: String,error: Error,response: URLResponse? = nil,attributes: [AttributeKey: AttributeValue] = [:])
    func stopResourceWithError(resourceKey: String,message: String,type: String? = nil,response: URLResponse? = nil,attributes: [AttributeKey: AttributeValue] = [:])
    func addAction(type: RUMActionType,name: String,attributes: [AttributeKey: AttributeValue] = [:])
    func startAction(type: RUMActionType,name: String,attributes: [AttributeKey: AttributeValue] = [:])
    func stopAction(type: RUMActionType,name: String? = nil,attributes: [AttributeKey: AttributeValue] = [:])
    func startFeatureOperation(name: String,operationKey: String? = nil,attributes: [AttributeKey: AttributeValue] = [:])
    func succeedFeatureOperation(name: String,operationKey: String? = nil,attributes: [AttributeKey: AttributeValue] = [:])
    func failFeatureOperation(name: String,operationKey: String? = nil,reason: RUMFeatureOperationFailureReason,attributes: [AttributeKey: AttributeValue] = [:])
public extension RUMMonitorProtocol
    var _internal: DatadogInternalInterface?
public struct DatadogInternalInterface
    public func addLongTask(at time: Date,duration: TimeInterval,attributes: [AttributeKey: AttributeValue] = [:])
    public func updatePerformanceMetric(at time: Date,metric: PerformanceMetric,value: Double,attributes: [AttributeKey: AttributeValue] = [:])
    public func setInternalViewAttribute(at time: Date,key: AttributeKey,value: AttributeValue)
    public func addResourceMetrics(at time: Date,resourceKey: String,fetch: (start: Date, end: Date),redirection: (start: Date, end: Date)?,dns: (start: Date, end: Date)?,connect: (start: Date, end: Date)?,ssl: (start: Date, end: Date)?,firstByte: (start: Date, end: Date)?,download: (start: Date, end: Date)?,responseSize: Int64?,attributes: [AttributeKey: AttributeValue] = [:])
public typealias RUMResourceType = RUMResourceEvent.Resource.ResourceType
public typealias RUMFeatureOperationFailureReason = RUMVitalEvent.Vital.FeatureOperationProperties.FailureReason
public enum RUMActionType
    case tap
    case click
    case scroll
    case swipe
    case custom
public enum RUMErrorSource
    case source
    case network
    case webview
    case console
    case custom
public protocol RUMMonitorProtocol: RUMMonitorViewProtocol, AnyObject
    func addAttribute(forKey key: AttributeKey, value: AttributeValue)
    func addAttributes(_ attributes: [AttributeKey: AttributeValue])
    func removeAttribute(forKey key: AttributeKey)
    func removeAttributes(forKeys keys: [AttributeKey])
    func currentSessionID(completion: @escaping (String?) -> Void)
    func stopSession()
    func addTiming(name: String)
    func addError(message: String,type: String?,stack: String?,source: RUMErrorSource,attributes: [AttributeKey: AttributeValue],file: StaticString?,line: UInt?)
    func addError(error: Error,source: RUMErrorSource,attributes: [AttributeKey: AttributeValue])
    func startResource(resourceKey: String,request: URLRequest,attributes: [AttributeKey: AttributeValue])
    func startResource(resourceKey: String,url: URL,attributes: [AttributeKey: AttributeValue])
    func startResource(resourceKey: String,httpMethod: RUMMethod,urlString: String,attributes: [AttributeKey: AttributeValue])
    func addResourceMetrics(resourceKey: String,metrics: URLSessionTaskMetrics,attributes: [AttributeKey: AttributeValue])
    func stopResource(resourceKey: String,response: URLResponse,size: Int64?,attributes: [AttributeKey: AttributeValue])
    func stopResource(resourceKey: String,statusCode: Int?,kind: RUMResourceType,size: Int64?,attributes: [AttributeKey: AttributeValue])
    func stopResourceWithError(resourceKey: String,error: Error,response: URLResponse?,attributes: [AttributeKey: AttributeValue])
    func stopResourceWithError(resourceKey: String,message: String,type: String?,response: URLResponse?,attributes: [AttributeKey: AttributeValue])
    func addAction(type: RUMActionType,name: String,attributes: [AttributeKey: AttributeValue])
    func startAction(type: RUMActionType,name: String,attributes: [AttributeKey: AttributeValue])
    func stopAction(type: RUMActionType,name: String?,attributes: [AttributeKey: AttributeValue])
    func addFeatureFlagEvaluation(name: String,value: Encodable)
    func startFeatureOperation(name: String,operationKey: String?,attributes: [AttributeKey: AttributeValue])
    func succeedFeatureOperation(name: String,operationKey: String?,attributes: [AttributeKey: AttributeValue])
    func failFeatureOperation(name: String,operationKey: String?,reason: RUMFeatureOperationFailureReason,attributes: [AttributeKey: AttributeValue])
    var debug: Bool
    func addError(error: Error,source: RUMErrorSource,attributes: [AttributeKey: AttributeValue],completionHandler: @escaping CompletionHandler)
public protocol RUMMonitorViewProtocol: AnyObject
    func addViewAttribute(forKey key: AttributeKey, value: AttributeValue)
    func addViewAttributes(_ attributes: [AttributeKey: AttributeValue])
    func removeViewAttribute(forKey key: AttributeKey)
    func removeViewAttributes(forKeys keys: [AttributeKey])
    func startView(viewController: UIViewController,name: String?,attributes: [AttributeKey: AttributeValue])
    func stopView(viewController: UIViewController,attributes: [AttributeKey: AttributeValue])
    func startView(key: String,name: String?,attributes: [AttributeKey: AttributeValue])
    func stopView(key: String,attributes: [AttributeKey: AttributeValue])
    func addViewLoadingTime(overwrite: Bool)
public enum PerformanceMetric
    case flutterBuildTime
    case flutterRasterTime
    case jsFrameTimeSeconds

# ----------------------------------
# API surface for DatadogCrashReporting:
# ----------------------------------

public final class CrashReporting
    public static func enable(in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func enable(with plugin: CrashReportingPlugin, in core: DatadogCoreProtocol = CoreRegistry.default)
public static func enable()
public protocol CrashReportingPlugin: AnyObject
    func readPendingCrashReport(completion: @escaping (DDCrashReport?) -> Bool)
    func inject(context: Data)
    var backtraceReporter: BacktraceReporting?

# ----------------------------------
# API surface for DatadogWebViewTracking:
# ----------------------------------

public enum WebViewTracking
    public static func enable(webView: WKWebView,hosts: Set<String> = [],logsSampleRate: SampleRate = .maxSampleRate,in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func disable(webView: WKWebView)
[?] extension InternalExtension where ExtendedType == WebViewTracking
    public class AbstractMessageEmitter
        public func send(body: Any, slotId: String? = nil)
    public static func messageEmitter(in core: DatadogCoreProtocol,logsSampleRate: SampleRate = .maxSampleRate) -> AbstractMessageEmitter

# ----------------------------------
# API surface for DatadogSessionReplay:
# ----------------------------------

[?] extension SRTextPosition.Alignment
    public init(systemTextAlignment: NSTextAlignment,vertical: SRTextPosition.Alignment.Vertical = .center)
public struct SRSegment: SRDataModel
    public let application: Application
    public let end: Int64
    public let hasFullSnapshot: Bool?
    public let indexInView: Int64?
    public let records: [SRRecord]
    public let recordsCount: Int64
    public let session: Session
    public let source: Source
    public let start: Int64
    public let view: View
    public enum CodingKeys: String, CodingKey
        case application = "application"
        case end = "end"
        case hasFullSnapshot = "has_full_snapshot"
        case indexInView = "index_in_view"
        case records = "records"
        case recordsCount = "records_count"
        case session = "session"
        case source = "source"
        case start = "start"
        case view = "view"
    public init(application: Application,end: Int64,hasFullSnapshot: Bool? = nil,indexInView: Int64? = nil,records: [SRRecord],recordsCount: Int64,session: Session,source: Source,start: Int64,view: View)
    public struct Application: Codable
        public let id: String
        public enum CodingKeys: String, CodingKey
            case id = "id"
        public init(id: String)
    public struct Session: Codable
        public let id: String
        public enum CodingKeys: String, CodingKey
            case id = "id"
        public init(id: String)
    public enum Source: String, Codable
        case android = "android"
        case ios = "ios"
        case flutter = "flutter"
        case reactNative = "react-native"
        case kotlinMultiplatform = "kotlin-multiplatform"
    public struct View: Codable
        public let id: String
        public enum CodingKeys: String, CodingKey
            case id = "id"
        public init(id: String)
public struct SRShapeBorder: Codable, Hashable
    public let color: String
    public let width: Int64
    public enum CodingKeys: String, CodingKey
        case color = "color"
        case width = "width"
    public init(color: String,width: Int64)
public struct SRContentClip: Codable, Hashable
    public let bottom: Int64?
    public let left: Int64?
    public let right: Int64?
    public let top: Int64?
    public enum CodingKeys: String, CodingKey
        case bottom = "bottom"
        case left = "left"
        case right = "right"
        case top = "top"
    public init(bottom: Int64? = nil,left: Int64? = nil,right: Int64? = nil,top: Int64? = nil)
public struct SRShapeStyle: Codable, Hashable
    public let backgroundColor: String?
    public let cornerRadius: Double?
    public let opacity: Double?
    public enum CodingKeys: String, CodingKey
        case backgroundColor = "backgroundColor"
        case cornerRadius = "cornerRadius"
        case opacity = "opacity"
    public init(backgroundColor: String? = nil,cornerRadius: Double? = nil,opacity: Double? = nil)
public struct SRShapeWireframe: Codable, Hashable
    public let border: SRShapeBorder?
    public let clip: SRContentClip?
    public let height: Int64
    public let id: Int64
    public let shapeStyle: SRShapeStyle?
    public let type: String = "shape"
    public let width: Int64
    public let x: Int64
    public let y: Int64
    public enum CodingKeys: String, CodingKey
        case border = "border"
        case clip = "clip"
        case height = "height"
        case id = "id"
        case shapeStyle = "shapeStyle"
        case type = "type"
        case width = "width"
        case x = "x"
        case y = "y"
    public init(border: SRShapeBorder? = nil,clip: SRContentClip? = nil,height: Int64,id: Int64,shapeStyle: SRShapeStyle? = nil,width: Int64,x: Int64,y: Int64)
public struct SRTextPosition: Codable, Hashable
    public let alignment: Alignment?
    public let padding: Padding?
    public enum CodingKeys: String, CodingKey
        case alignment = "alignment"
        case padding = "padding"
    public init(alignment: Alignment? = nil,padding: Padding? = nil)
    public struct Alignment: Codable, Hashable
        public let horizontal: Horizontal?
        public let vertical: Vertical?
        public enum CodingKeys: String, CodingKey
            case horizontal = "horizontal"
            case vertical = "vertical"
        public init(horizontal: Horizontal? = nil,vertical: Vertical? = nil)
        public enum Horizontal: String, Codable
            case left = "left"
            case right = "right"
            case center = "center"
        public enum Vertical: String, Codable
            case top = "top"
            case bottom = "bottom"
            case center = "center"
    public struct Padding: Codable, Hashable
        public let bottom: Int64?
        public let left: Int64?
        public let right: Int64?
        public let top: Int64?
        public enum CodingKeys: String, CodingKey
            case bottom = "bottom"
            case left = "left"
            case right = "right"
            case top = "top"
        public init(bottom: Int64? = nil,left: Int64? = nil,right: Int64? = nil,top: Int64? = nil)
public struct SRTextStyle: Codable, Hashable
    public let color: String
    public let family: String
    public let size: Int64
    public enum CodingKeys: String, CodingKey
        case color = "color"
        case family = "family"
        case size = "size"
    public init(color: String,family: String,size: Int64)
public struct SRTextWireframe: Codable, Hashable
    public let border: SRShapeBorder?
    public let clip: SRContentClip?
    public let height: Int64
    public let id: Int64
    public let shapeStyle: SRShapeStyle?
    public var text: String
    public let textPosition: SRTextPosition?
    public let textStyle: SRTextStyle
    public let type: String = "text"
    public let width: Int64
    public let x: Int64
    public let y: Int64
    public enum CodingKeys: String, CodingKey
        case border = "border"
        case clip = "clip"
        case height = "height"
        case id = "id"
        case shapeStyle = "shapeStyle"
        case text = "text"
        case textPosition = "textPosition"
        case textStyle = "textStyle"
        case type = "type"
        case width = "width"
        case x = "x"
        case y = "y"
    public init(border: SRShapeBorder? = nil,clip: SRContentClip? = nil,height: Int64,id: Int64,shapeStyle: SRShapeStyle? = nil,text: String,textPosition: SRTextPosition? = nil,textStyle: SRTextStyle,width: Int64,x: Int64,y: Int64)
public struct SRImageWireframe: Codable, Hashable
    public var base64: String?
    public let border: SRShapeBorder?
    public let clip: SRContentClip?
    public let height: Int64
    public let id: Int64
    public var isEmpty: Bool?
    public var mimeType: String?
    public var resourceId: String?
    public let shapeStyle: SRShapeStyle?
    public let type: String = "image"
    public let width: Int64
    public let x: Int64
    public let y: Int64
    public enum CodingKeys: String, CodingKey
        case base64 = "base64"
        case border = "border"
        case clip = "clip"
        case height = "height"
        case id = "id"
        case isEmpty = "isEmpty"
        case mimeType = "mimeType"
        case resourceId = "resourceId"
        case shapeStyle = "shapeStyle"
        case type = "type"
        case width = "width"
        case x = "x"
        case y = "y"
    public init(base64: String? = nil,border: SRShapeBorder? = nil,clip: SRContentClip? = nil,height: Int64,id: Int64,isEmpty: Bool? = nil,mimeType: String? = nil,resourceId: String? = nil,shapeStyle: SRShapeStyle? = nil,width: Int64,x: Int64,y: Int64)
public struct SRPlaceholderWireframe: Codable, Hashable
    public let clip: SRContentClip?
    public let height: Int64
    public let id: Int64
    public var label: String?
    public let type: String = "placeholder"
    public let width: Int64
    public let x: Int64
    public let y: Int64
    public enum CodingKeys: String, CodingKey
        case clip = "clip"
        case height = "height"
        case id = "id"
        case label = "label"
        case type = "type"
        case width = "width"
        case x = "x"
        case y = "y"
    public init(clip: SRContentClip? = nil,height: Int64,id: Int64,label: String? = nil,width: Int64,x: Int64,y: Int64)
public struct SRWebviewWireframe: Codable, Hashable
    public let border: SRShapeBorder?
    public let clip: SRContentClip?
    public let height: Int64
    public let id: Int64
    public let isVisible: Bool?
    public let shapeStyle: SRShapeStyle?
    public let slotId: String
    public let type: String = "webview"
    public let width: Int64
    public let x: Int64
    public let y: Int64
    public enum CodingKeys: String, CodingKey
        case border = "border"
        case clip = "clip"
        case height = "height"
        case id = "id"
        case isVisible = "isVisible"
        case shapeStyle = "shapeStyle"
        case slotId = "slotId"
        case type = "type"
        case width = "width"
        case x = "x"
        case y = "y"
    public init(border: SRShapeBorder? = nil,clip: SRContentClip? = nil,height: Int64,id: Int64,isVisible: Bool? = nil,shapeStyle: SRShapeStyle? = nil,slotId: String,width: Int64,x: Int64,y: Int64)
public enum SRWireframe: Codable
    case shapeWireframe(value: SRShapeWireframe)
    case textWireframe(value: SRTextWireframe)
    case imageWireframe(value: SRImageWireframe)
    case placeholderWireframe(value: SRPlaceholderWireframe)
    case webviewWireframe(value: SRWebviewWireframe)
    public func encode(to encoder: Encoder) throws
    public init(from decoder: Decoder) throws
public struct SRFullSnapshotRecord: Codable
    public let data: Data
    public let timestamp: Int64
    public let type: Int64 = 10
    public enum CodingKeys: String, CodingKey
        case data = "data"
        case timestamp = "timestamp"
        case type = "type"
    public init(data: Data,timestamp: Int64)
    public struct Data: Codable
        public let wireframes: [SRWireframe]
        public enum CodingKeys: String, CodingKey
            case wireframes = "wireframes"
        public init(wireframes: [SRWireframe])
public struct SRIncrementalSnapshotRecord: Codable
    public let data: Data
    public let timestamp: Int64
    public let type: Int64 = 11
    public enum CodingKeys: String, CodingKey
        case data = "data"
        case timestamp = "timestamp"
        case type = "type"
    public init(data: Data,timestamp: Int64)
    public enum Data: Codable
        case mutationData(value: MutationData)
        case touchData(value: TouchData)
        case viewportResizeData(value: ViewportResizeData)
        case pointerInteractionData(value: PointerInteractionData)
        public func encode(to encoder: Encoder) throws
        public init(from decoder: Decoder) throws
        public struct MutationData: Codable
            public let adds: [Adds]
            public let removes: [Removes]
            public let source: Int64 = 0
            public let updates: [Updates]
            public enum CodingKeys: String, CodingKey
                case adds = "adds"
                case removes = "removes"
                case source = "source"
                case updates = "updates"
            public init(adds: [Adds],removes: [Removes],updates: [Updates])
            public struct Adds: Codable
                public let previousId: Int64?
                public let wireframe: SRWireframe
                public enum CodingKeys: String, CodingKey
                    case previousId = "previousId"
                    case wireframe = "wireframe"
                public init(previousId: Int64? = nil,wireframe: SRWireframe)
            public struct Removes: Codable
                public let id: Int64
                public enum CodingKeys: String, CodingKey
                    case id = "id"
                public init(id: Int64)
            public enum Updates: Codable
                case textWireframeUpdate(value: TextWireframeUpdate)
                case shapeWireframeUpdate(value: ShapeWireframeUpdate)
                case imageWireframeUpdate(value: ImageWireframeUpdate)
                case placeholderWireframeUpdate(value: PlaceholderWireframeUpdate)
                case webviewWireframeUpdate(value: WebviewWireframeUpdate)
                public func encode(to encoder: Encoder) throws
                public init(from decoder: Decoder) throws
                public struct TextWireframeUpdate: Codable
                    public let border: SRShapeBorder?
                    public let clip: SRContentClip?
                    public let height: Int64?
                    public let id: Int64
                    public let shapeStyle: SRShapeStyle?
                    public var text: String?
                    public let textPosition: SRTextPosition?
                    public let textStyle: SRTextStyle?
                    public let type: String = "text"
                    public let width: Int64?
                    public let x: Int64?
                    public let y: Int64?
                    public enum CodingKeys: String, CodingKey
                        case border = "border"
                        case clip = "clip"
                        case height = "height"
                        case id = "id"
                        case shapeStyle = "shapeStyle"
                        case text = "text"
                        case textPosition = "textPosition"
                        case textStyle = "textStyle"
                        case type = "type"
                        case width = "width"
                        case x = "x"
                        case y = "y"
                    public init(border: SRShapeBorder? = nil,clip: SRContentClip? = nil,height: Int64? = nil,id: Int64,shapeStyle: SRShapeStyle? = nil,text: String? = nil,textPosition: SRTextPosition? = nil,textStyle: SRTextStyle? = nil,width: Int64? = nil,x: Int64? = nil,y: Int64? = nil)
                public struct ShapeWireframeUpdate: Codable
                    public let border: SRShapeBorder?
                    public let clip: SRContentClip?
                    public let height: Int64?
                    public let id: Int64
                    public let shapeStyle: SRShapeStyle?
                    public let type: String = "shape"
                    public let width: Int64?
                    public let x: Int64?
                    public let y: Int64?
                    public enum CodingKeys: String, CodingKey
                        case border = "border"
                        case clip = "clip"
                        case height = "height"
                        case id = "id"
                        case shapeStyle = "shapeStyle"
                        case type = "type"
                        case width = "width"
                        case x = "x"
                        case y = "y"
                    public init(border: SRShapeBorder? = nil,clip: SRContentClip? = nil,height: Int64? = nil,id: Int64,shapeStyle: SRShapeStyle? = nil,width: Int64? = nil,x: Int64? = nil,y: Int64? = nil)
                public struct ImageWireframeUpdate: Codable
                    public var base64: String?
                    public let border: SRShapeBorder?
                    public let clip: SRContentClip?
                    public let height: Int64?
                    public let id: Int64
                    public var isEmpty: Bool?
                    public var mimeType: String?
                    public var resourceId: String?
                    public let shapeStyle: SRShapeStyle?
                    public let type: String = "image"
                    public let width: Int64?
                    public let x: Int64?
                    public let y: Int64?
                    public enum CodingKeys: String, CodingKey
                        case base64 = "base64"
                        case border = "border"
                        case clip = "clip"
                        case height = "height"
                        case id = "id"
                        case isEmpty = "isEmpty"
                        case mimeType = "mimeType"
                        case resourceId = "resourceId"
                        case shapeStyle = "shapeStyle"
                        case type = "type"
                        case width = "width"
                        case x = "x"
                        case y = "y"
                    public init(base64: String? = nil,border: SRShapeBorder? = nil,clip: SRContentClip? = nil,height: Int64? = nil,id: Int64,isEmpty: Bool? = nil,mimeType: String? = nil,resourceId: String? = nil,shapeStyle: SRShapeStyle? = nil,width: Int64? = nil,x: Int64? = nil,y: Int64? = nil)
                public struct PlaceholderWireframeUpdate: Codable
                    public let clip: SRContentClip?
                    public let height: Int64?
                    public let id: Int64
                    public var label: String?
                    public let type: String = "placeholder"
                    public let width: Int64?
                    public let x: Int64?
                    public let y: Int64?
                    public enum CodingKeys: String, CodingKey
                        case clip = "clip"
                        case height = "height"
                        case id = "id"
                        case label = "label"
                        case type = "type"
                        case width = "width"
                        case x = "x"
                        case y = "y"
                    public init(clip: SRContentClip? = nil,height: Int64? = nil,id: Int64,label: String? = nil,width: Int64? = nil,x: Int64? = nil,y: Int64? = nil)
                public struct WebviewWireframeUpdate: Codable
                    public let border: SRShapeBorder?
                    public let clip: SRContentClip?
                    public let height: Int64?
                    public let id: Int64
                    public let isVisible: Bool?
                    public let shapeStyle: SRShapeStyle?
                    public let slotId: String
                    public let type: String = "webview"
                    public let width: Int64?
                    public let x: Int64?
                    public let y: Int64?
                    public enum CodingKeys: String, CodingKey
                        case border = "border"
                        case clip = "clip"
                        case height = "height"
                        case id = "id"
                        case isVisible = "isVisible"
                        case shapeStyle = "shapeStyle"
                        case slotId = "slotId"
                        case type = "type"
                        case width = "width"
                        case x = "x"
                        case y = "y"
                    public init(border: SRShapeBorder? = nil,clip: SRContentClip? = nil,height: Int64? = nil,id: Int64,isVisible: Bool? = nil,shapeStyle: SRShapeStyle? = nil,slotId: String,width: Int64? = nil,x: Int64? = nil,y: Int64? = nil)
        public struct TouchData: Codable
            public let positions: [Positions]?
            public let source: Int64 = 2
            public enum CodingKeys: String, CodingKey
                case positions = "positions"
                case source = "source"
            public init(positions: [Positions]? = nil)
            public struct Positions: Codable
                public let id: Int64
                public let timestamp: Int64
                public let x: Int64
                public let y: Int64
                public enum CodingKeys: String, CodingKey
                    case id = "id"
                    case timestamp = "timestamp"
                    case x = "x"
                    case y = "y"
                public init(id: Int64,timestamp: Int64,x: Int64,y: Int64)
        public struct ViewportResizeData: Codable
            public let height: Int64
            public let source: Int64 = 4
            public let width: Int64
            public enum CodingKeys: String, CodingKey
                case height = "height"
                case source = "source"
                case width = "width"
            public init(height: Int64,width: Int64)
        public struct PointerInteractionData: Codable
            public let pointerEventType: PointerEventType
            public let pointerId: Int64
            public let pointerType: PointerType
            public let source: Int64 = 9
            public let x: Double
            public let y: Double
            public enum CodingKeys: String, CodingKey
                case pointerEventType = "pointerEventType"
                case pointerId = "pointerId"
                case pointerType = "pointerType"
                case source = "source"
                case x = "x"
                case y = "y"
            public init(pointerEventType: PointerEventType,pointerId: Int64,pointerType: PointerType,x: Double,y: Double)
            public enum PointerEventType: String, Codable
                case down = "down"
                case up = "up"
                case move = "move"
            public enum PointerType: String, Codable
                case mouse = "mouse"
                case touch = "touch"
                case pen = "pen"
public struct SRMetaRecord: Codable
    public let data: Data
    public let slotId: String?
    public let timestamp: Int64
    public let type: Int64 = 4
    public enum CodingKeys: String, CodingKey
        case data = "data"
        case slotId = "slotId"
        case timestamp = "timestamp"
        case type = "type"
    public init(data: Data,slotId: String? = nil,timestamp: Int64)
    public struct Data: Codable
        public let height: Int64
        public let href: String?
        public let width: Int64
        public enum CodingKeys: String, CodingKey
            case height = "height"
            case href = "href"
            case width = "width"
        public init(height: Int64,href: String? = nil,width: Int64)
public struct SRFocusRecord: Codable
    public let data: Data
    public let slotId: String?
    public let timestamp: Int64
    public let type: Int64 = 6
    public enum CodingKeys: String, CodingKey
        case data = "data"
        case slotId = "slotId"
        case timestamp = "timestamp"
        case type = "type"
    public init(data: Data,slotId: String? = nil,timestamp: Int64)
    public struct Data: Codable
        public let hasFocus: Bool
        public enum CodingKeys: String, CodingKey
            case hasFocus = "has_focus"
        public init(hasFocus: Bool)
public struct SRViewEndRecord: Codable
    public let slotId: String?
    public let timestamp: Int64
    public let type: Int64 = 7
    public enum CodingKeys: String, CodingKey
        case slotId = "slotId"
        case timestamp = "timestamp"
        case type = "type"
    public init(slotId: String? = nil,timestamp: Int64)
public struct SRVisualViewportRecord: Codable
    public let data: Data
    public let slotId: String?
    public let timestamp: Int64
    public let type: Int64 = 8
    public enum CodingKeys: String, CodingKey
        case data = "data"
        case slotId = "slotId"
        case timestamp = "timestamp"
        case type = "type"
    public init(data: Data,slotId: String? = nil,timestamp: Int64)
    public struct Data: Codable
        public let height: Double
        public let offsetLeft: Double
        public let offsetTop: Double
        public let pageLeft: Double
        public let pageTop: Double
        public let scale: Double
        public let width: Double
        public enum CodingKeys: String, CodingKey
            case height = "height"
            case offsetLeft = "offsetLeft"
            case offsetTop = "offsetTop"
            case pageLeft = "pageLeft"
            case pageTop = "pageTop"
            case scale = "scale"
            case width = "width"
        public init(height: Double,offsetLeft: Double,offsetTop: Double,pageLeft: Double,pageTop: Double,scale: Double,width: Double)
public enum SRRecord: Codable
    case fullSnapshotRecord(value: SRFullSnapshotRecord)
    case incrementalSnapshotRecord(value: SRIncrementalSnapshotRecord)
    case metaRecord(value: SRMetaRecord)
    case focusRecord(value: SRFocusRecord)
    case viewEndRecord(value: SRViewEndRecord)
    case visualViewportRecord(value: SRVisualViewportRecord)
    public func encode(to encoder: Encoder) throws
    public init(from decoder: Decoder) throws
public typealias WireframeID = NodeID
public class SessionReplayWireframesBuilder
    public struct FontOverride
        public init(size: CGFloat?)
    public func createShapeWireframe(id: WireframeID,frame: CGRect,clip: CGRect,borderColor: CGColor? = nil,borderWidth: CGFloat? = nil,backgroundColor: CGColor? = nil,cornerRadius: CGFloat? = nil,opacity: CGFloat? = nil) -> SRWireframe
    public func createImageWireframe(id: WireframeID,resource: SessionReplayResource,frame: CGRect,clip: CGRect,borderColor: CGColor? = nil,borderWidth: CGFloat? = nil,backgroundColor: CGColor? = nil,cornerRadius: CGFloat? = nil,opacity: CGFloat? = nil) -> SRWireframe
    public func createTextWireframe(id: WireframeID,frame: CGRect,clip: CGRect,text: String,textFrame: CGRect? = nil,textAlignment: SRTextPosition.Alignment? = nil,textColor: CGColor? = nil,font: UIFont? = nil,fontOverride: FontOverride? = nil,fontScalingEnabled: Bool = false,borderColor: CGColor? = nil,borderWidth: CGFloat? = nil,backgroundColor: CGColor? = nil,cornerRadius: CGFloat? = nil,opacity: CGFloat? = nil) -> SRWireframe
    public func createPlaceholderWireframe(id: Int64,frame: CGRect,clip: CGRect,label: String) -> SRWireframe
    public func visibleWebViewWireframe(id: Int,frame: CGRect,clip: CGRect,borderColor: CGColor? = nil,borderWidth: CGFloat? = nil,backgroundColor: CGColor? = nil,cornerRadius: CGFloat? = nil,opacity: CGFloat? = nil) -> SRWireframe
    public func hiddenWebViewWireframes() -> [SRWireframe]
[?] extension SRContentClip
    public static func create(bottom: Int64?,left: Int64?,right: Int64?,top: Int64?) -> SRContentClip
[?] extension SRImageWireframe
    public static func == (lhs: SRImageWireframe, rhs: SRImageWireframe) -> Bool
    public func hash(into hasher: inout Hasher)
public protocol SessionReplayTextObfuscating
    func mask(text: String) -> String
public extension TextAndInputPrivacyLevel
    var sensitiveTextObfuscator: SessionReplayTextObfuscating
    var inputAndOptionTextObfuscator: SessionReplayTextObfuscating
    var staticTextObfuscator: SessionReplayTextObfuscating
    var hintTextObfuscator: SessionReplayTextObfuscating
public class Recorder: Recording
    public struct Context
        public let textAndInputPrivacy: TextAndInputPrivacyLevel
        public let imagePrivacy: ImagePrivacyLevel
        public let touchPrivacy: TouchPrivacyLevel
    deinit
public extension Int64
    static func positiveRandom<T>(using generator: inout T) -> Int64 where T: RandomNumberGenerator
public typealias NodeID = Int64
public final class NodeIDGenerator
    public func nodeID(view: UIView, nodeRecorder: SessionReplayNodeRecorder) -> NodeID
public protocol SessionReplayNodeRecorder
    func semantics(of view: UIView, with attributes: SessionReplayViewAttributes, in context: SessionReplayViewTreeRecordingContext) -> SessionReplayNodeSemantics?
    var identifier: UUID
public protocol SessionReplayNodeWireframesBuilder
    var wireframeRect: CGRect
    func buildWireframes(with builder: SessionReplayWireframesBuilder) -> [SRWireframe]
public struct SessionReplayViewTreeRecordingContext
    public let recorder: Recorder.Context
    public let ids: NodeIDGenerator
public struct SessionReplayNode
    public let viewAttributes: SessionReplayViewAttributes
    public let wireframesBuilder: SessionReplayNodeWireframesBuilder
    public init(viewAttributes: SessionReplayViewAttributes, wireframesBuilder: SessionReplayNodeWireframesBuilder)
public protocol SessionReplayResource
    var mimeType: String
    func calculateIdentifier() -> String
    func calculateData() -> Data
public struct SessionReplayViewAttributes: Equatable
    public internal(set) var frame: CGRect
    public internal(set) var clip: CGRect
    public internal(set) var backgroundColor: CGColor?
    public internal(set) var layerBorderColor: CGColor?
    public internal(set) var layerBorderWidth: CGFloat
    public internal(set) var layerCornerRadius: CGFloat
    public internal(set) var alpha: CGFloat
public extension SessionReplayViewAttributes
    func resolveTextAndInputPrivacyLevel(in context: SessionReplayViewTreeRecordingContext) -> TextAndInputPrivacyLevel
    func resolveImagePrivacyLevel(in context: SessionReplayViewTreeRecordingContext) -> ImagePrivacyLevel
public protocol SessionReplayNodeSemantics
    static var importance: Int
    var subtreeStrategy: SessionReplayNodeSubtreeStrategy
    var nodes: [SessionReplayNode]
public enum SessionReplayNodeSubtreeStrategy
    case record
    case ignore
public struct SessionReplayInvisibleElement: SessionReplayNodeSemantics
    public static let importance: Int = 0
    public let subtreeStrategy: SessionReplayNodeSubtreeStrategy
    public let nodes: [SessionReplayNode] = []
    public static let constant = SessionReplayInvisibleElement()
public struct SessionReplaySpecificElement: SessionReplayNodeSemantics
    public static let importance: Int = .max
    public let subtreeStrategy: SessionReplayNodeSubtreeStrategy
    public let nodes: [SessionReplayNode]
    public init(subtreeStrategy: SessionReplayNodeSubtreeStrategy,nodes: [SessionReplayNode])
public enum SessionReplay
    public static func enable(with configuration: SessionReplay.Configuration,in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func startRecording(in core: DatadogCoreProtocol = CoreRegistry.default)
    public static func stopRecording(in core: DatadogCoreProtocol = CoreRegistry.default)
[?] extension SessionReplay
    public struct Configuration
        public var replaySampleRate: Float
        public var textAndInputPrivacyLevel: TextAndInputPrivacyLevel
        public var imagePrivacyLevel: ImagePrivacyLevel
        public var touchPrivacyLevel: TouchPrivacyLevel
        public var startRecordingImmediately: Bool
        public var customEndpoint: URL?
        public var featureFlags: FeatureFlags
        public init(replaySampleRate: SampleRate = .maxSampleRate,textAndInputPrivacyLevel: TextAndInputPrivacyLevel = .maskAll,imagePrivacyLevel: ImagePrivacyLevel = .maskAll,touchPrivacyLevel: TouchPrivacyLevel = .hide,startRecordingImmediately: Bool = true,customEndpoint: URL? = nil,featureFlags: FeatureFlags = .defaults)
        public mutating func setAdditionalNodeRecorders(_ additionalNodeRecorders: [SessionReplayNodeRecorder])
[?] extension SessionReplay.Configuration
    public typealias FeatureFlags = [FeatureFlag: Bool]
    public enum FeatureFlag: String
        case swiftui
[?] extension SessionReplay.Configuration.FeatureFlags
    public static var defaults: Self
    public subscript(flag: Key) -> Bool
[?] extension DatadogExtension where ExtendedType: UIView
    public var sessionReplayPrivacyOverrides: SessionReplayPrivacyOverrides
public final class SessionReplayPrivacyOverrides
    public var textAndInputPrivacy: TextAndInputPrivacyLevel?
    public var imagePrivacy: ImagePrivacyLevel?
    public var touchPrivacy: TouchPrivacyLevel?
    public var hide: Bool?
[?] extension PrivacyOverrides: Equatable
    public static func == (lhs: SessionReplayPrivacyOverrides, rhs: SessionReplayPrivacyOverrides) -> Bool
public struct SessionReplayPrivacyView<Content: View>: View
    public init(isActive: Bool = true,textAndInputPrivacy: TextAndInputPrivacyLevel? = nil,imagePrivacy: ImagePrivacyLevel? = nil,touchPrivacy: TouchPrivacyLevel? = nil,hide: Bool? = nil,core: DatadogCoreProtocol = CoreRegistry.default,@ViewBuilder content: @escaping () -> Content)
    public var body: some View

# ----------------------------------
# API surface for DatadogFlags:
# ----------------------------------

public final class FlagsClient
    public static let defaultName = "default"
    public static func create(name: String = FlagsClient.defaultName,in core: DatadogCoreProtocol = CoreRegistry.default) -> FlagsClientProtocol
    public static func shared(named name: String = FlagsClient.defaultName,in core: DatadogCoreProtocol = CoreRegistry.default) -> FlagsClientProtocol
[?] extension FlagsClient: FlagsClientProtocol
    public func setEvaluationContext(_ context: FlagsEvaluationContext,completion: @escaping (Result<Void, FlagsError>) -> Void)
    public func getDetails<T>(key: String, defaultValue: T) -> FlagDetails<T> where T: Equatable, T: FlagValue
public protocol FlagsClientProtocol: AnyObject
    func setEvaluationContext(_ context: FlagsEvaluationContext,completion: @escaping (Result<Void, FlagsError>) -> Void)
    func getDetails<T>(key: String, defaultValue: T) -> FlagDetails<T> where T: Equatable, T: FlagValue
[?] extension FlagsClientProtocol
    public func setEvaluationContext(_ context: FlagsEvaluationContext)
    public func setEvaluationContext(_ context: FlagsEvaluationContext) async throws
[?] extension FlagsClientProtocol
    public func getValue<T>(key: String, defaultValue: T) -> T where T: Equatable, T: FlagValue
    public func getBooleanValue(key: String, defaultValue: Bool) -> Bool
    public func getStringValue(key: String, defaultValue: String) -> String
    public func getIntegerValue(key: String, defaultValue: Int) -> Int
    public func getDoubleValue(key: String, defaultValue: Double) -> Double
    public func getObjectValue(key: String, defaultValue: AnyValue) -> AnyValue
[?] extension FlagsClientProtocol
    public func getBooleanDetails(key: String, defaultValue: Bool) -> FlagDetails<Bool>
    public func getStringDetails(key: String, defaultValue: String) -> FlagDetails<String>
    public func getIntegerDetails(key: String, defaultValue: Int) -> FlagDetails<Int>
    public func getDoubleDetails(key: String, defaultValue: Double) -> FlagDetails<Double>
    public func getObjectDetails(key: String, defaultValue: AnyValue) -> FlagDetails<AnyValue>
public enum Flags
    public struct Configuration
        public var gracefulModeEnabled: Bool
        public var customFlagsEndpoint: URL?
        public var customFlagsHeaders: [String: String]?
        public var customExposureEndpoint: URL?
        public var trackExposures: Bool
        public var rumIntegrationEnabled: Bool
        public init(gracefulModeEnabled: Bool = true,customFlagsEndpoint: URL? = nil,customFlagsHeaders: [String: String]? = nil,customExposureEndpoint: URL? = nil,trackExposures: Bool = true,rumIntegrationEnabled: Bool = true)
    public static func enable(with configuration: Flags.Configuration = .init(),in core: DatadogCoreProtocol = CoreRegistry.default)
public enum AnyValue: Equatable
    case string(String)
    case bool(Bool)
    case int(Int)
    case double(Double)
    case dictionary([String: AnyValue])
    case array([AnyValue])
    case null
[?] extension AnyValue: Codable
    public init(from decoder: Decoder) throws
    public func encode(to encoder: Encoder) throws
public enum FlagEvaluationError: Error
    case providerNotReady
    case flagNotFound
    case typeMismatch
public struct FlagDetails<T>: Equatable where T: Equatable
    public var key: String
    public var value: T
    public var variant: String?
    public var reason: String?
    public var error: FlagEvaluationError?
    public init(key: String,value: T,variant: String? = nil,reason: String? = nil,error: FlagEvaluationError? = nil)
public protocol FlagValue: Encodable
public enum FlagsError: Error
    case networkError(Error)
    case invalidResponse
    case clientNotInitialized
    case invalidConfiguration
public struct FlagsEvaluationContext: Equatable, Codable
    public let targetingKey: String
    public let attributes: [String: AnyValue]
    public init(targetingKey: String, attributes: [String: AnyValue] = [:])
