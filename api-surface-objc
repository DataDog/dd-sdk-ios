# ----------------------------------
# API surface for DatadogObjc:
# ----------------------------------

public protocol OTSpan
    var context: OTSpanContext
    var tracer: OTTracer
    func setOperationName(_ operationName: String)
    func setTag(_ key: String, value: NSString)
    func setTag(_ key: String, numberValue: NSNumber)
    func setTag(_ key: String, boolValue: Bool)
    func log(_ fields: [String: NSObject])
    func log(_ fields: [String: NSObject], timestamp: Date?)
    func setBaggageItem(_ key: String, value: String) -> OTSpan
    func getBaggageItem(_ key: String) -> String?
    func setError(_ error: Error)
    func setError(kind: String, message: String, stack: String?)
    func finish()
    func finishWithTime(_ finishTime: Date?)
    func setActive() -> OTSpan
public protocol OTSpanContext
    func forEachBaggageItem(_ callback: (_ key: String, _ value: String) -> Bool)
public class OT: NSObject
    @objc public static let formatTextMap = "OTFormatTextMap"
public protocol OTTracer
    func startSpan(_ operationName: String) -> OTSpan
    func startSpan(_ operationName: String, tags: NSDictionary?) -> OTSpan
    func startSpan(_ operationName: String, childOf parent: OTSpanContext?) -> OTSpan
    func startSpan(_ operationName: String, childOf parent: OTSpanContext?, tags: NSDictionary?) -> OTSpan
    func startSpan(_ operationName: String, childOf parent: OTSpanContext?, tags: NSDictionary?, startTime: Date?) -> OTSpan
    func inject(_ spanContext: OTSpanContext, format: String, carrier: Any) throws
    func extractWithFormat(_ format: String, carrier: Any) throws
public enum DDInjectEncoding: Int
    case multiple = 0
    case single = 1
public class DDOTelHTTPHeadersWriter: DDB3HTTPHeadersWriter
public class DDB3HTTPHeadersWriter: NSObject
    @objc public var traceHeaderFields: [String: String]
    public convenience init(samplingRate: Float,injectEncoding: DDInjectEncoding = .single)
    public init(sampleRate: Float = 20,injectEncoding: DDInjectEncoding = .single)
    public init(samplingStrategy: DDTraceSamplingStrategy,injectEncoding: DDInjectEncoding = .single,traceContextInjection: DDTraceContextInjection = .all)
public class DDHTTPHeadersWriter: NSObject
    @objc public var traceHeaderFields: [String: String]
    public convenience init(samplingRate: Float)
    public init(sampleRate: Float = 20)
    public init(samplingStrategy: DDTraceSamplingStrategy,traceContextInjection: DDTraceContextInjection)
public enum DDTraceContextInjection: Int
    case all
    case sampled
public class DDTraceSamplingStrategy: NSObject
    public static func headBased() -> DDTraceSamplingStrategy
    public static func custom(sampleRate: Float) -> DDTraceSamplingStrategy
public class DDW3CHTTPHeadersWriter: NSObject
    @objc public var traceHeaderFields: [String: String]
    public convenience init(samplingRate: Float)
    public init(sampleRate: Float = 20)
    public init(samplingStrategy: DDTraceSamplingStrategy,traceContextInjection: DDTraceContextInjection)
public class DDTraceConfiguration: NSObject
    override public init()
    public var sampleRate: Float
    public var service: String?
    public var tags: [String: Any]?
    public func setURLSessionTracking(_ tracking: DDTraceURLSessionTracking)
    public var bundleWithRumEnabled: Bool
    public var networkInfoEnabled: Bool
    public var customEndpoint: URL?
public class DDTraceFirstPartyHostsTracing: NSObject
    public init(hostsWithHeaderTypes: [String: Set<objc_TracingHeaderType>])
    public init(hostsWithHeaderTypes: [String: Set<objc_TracingHeaderType>], sampleRate: Float)
    public init(hosts: Set<String>)
    public init(hosts: Set<String>, sampleRate: Float)
public class DDTraceURLSessionTracking: NSObject
    public init(firstPartyHostsTracing: DDTraceFirstPartyHostsTracing)
    public func setFirstPartyHostsTracing(_ firstPartyHostsTracing: DDTraceFirstPartyHostsTracing)
public class DDTrace: NSObject
    public static func enable(with configuration: DDTraceConfiguration)
public class DDTracer: NSObject, DatadogObjc.OTTracer
    public static func shared() -> DatadogObjc.OTTracer
    public func startSpan(_ operationName: String) -> OTSpan
    public func startSpan(_ operationName: String, tags: NSDictionary?) -> OTSpan
    public func startSpan(_ operationName: String, childOf parent: OTSpanContext?) -> OTSpan
    public func startSpan(_ operationName: String,childOf parent: OTSpanContext?,tags: NSDictionary?) -> OTSpan
    public func startSpan(_ operationName: String,childOf parent: OTSpanContext?,tags: NSDictionary?,startTime: Date?) -> OTSpan
    public func inject(_ spanContext: OTSpanContext, format: String, carrier: Any) throws
    public func extractWithFormat(_ format: String, carrier: Any) throws
