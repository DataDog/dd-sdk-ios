# ----------------------------------
# API surface for DatadogObjc:
# ----------------------------------

public class DDInternalLogger: NSObject
    public static func consolePrint(_ message: String, _ level: DDCoreLoggerLevel)
    public static func telemetryDebug(id: String, message: String)
    public static func telemetryError(id: String, message: String, kind: String?, stack: String?)
public enum DDCoreLoggerLevel: Int
    case debug
    case warn
    case error
    case critical
open class DDNSURLSessionDelegate: NSObject, URLSessionTaskDelegate, URLSessionDataDelegate
    override public init()
    public init(additionalFirstPartyHostsWithHeaderTypes: [String: Set<DDTracingHeaderType>])
    public convenience init(additionalFirstPartyHosts: Set<String>)
public class DDURLSessionInstrumentationConfiguration: NSObject
    public init(delegateClass: URLSessionDataDelegate.Type)
    public func setFirstPartyHostsTracing(_ firstPartyHostsTracing: DDURLSessionInstrumentationFirstPartyHostsTracing)
    @objc public var delegateClass: URLSessionDataDelegate.Type
public class DDURLSessionInstrumentationFirstPartyHostsTracing: NSObject
    public init(hostsWithHeaderTypes: [String: Set<DDTracingHeaderType>])
    public init(hosts: Set<String>)
public class DDURLSessionInstrumentation: NSObject
    public static func enable(configuration: DDURLSessionInstrumentationConfiguration)
    public static func disable(delegateClass: URLSessionDataDelegate.Type)
public class DDTrackingConsent: NSObject
    public static func granted() -> DDTrackingConsent
    public static func notGranted() -> DDTrackingConsent
    public static func pending() -> DDTrackingConsent
public class DDDatadog: NSObject
    public static func initialize(configuration: DDConfiguration,trackingConsent: DDTrackingConsent)
    public static func setVerbosityLevel(_ verbosityLevel: DDSDKVerbosityLevel)
    public static func verbosityLevel() -> DDSDKVerbosityLevel
    public static func setUserInfo(id: String? = nil, name: String? = nil, email: String? = nil, extraInfo: [String: Any] = [:])
    public static func addUserExtraInfo(_ extraInfo: [String: Any])
    public static func setTrackingConsent(consent: DDTrackingConsent)
    public static func isInitialized() -> Bool
    public static func stopInstance()
    public static func clearAllData()
public class DDSite: NSObject
    public static func us1() -> DDSite
    public static func us3() -> DDSite
    public static func us5() -> DDSite
    public static func eu1() -> DDSite
    public static func ap1() -> DDSite
    public static func us1_fed() -> DDSite
public enum DDBatchSize: Int
    case small
    case medium
    case large
public enum DDUploadFrequency: Int
    case frequent
    case average
    case rare
public enum DDBatchProcessingLevel: Int
    case low
    case medium
    case high
public class DDTracingHeaderType: NSObject
    @objc public static let datadog = DDTracingHeaderType(.datadog)
    @objc public static let b3multi = DDTracingHeaderType(.b3multi)
    @objc public static let b3 = DDTracingHeaderType(.b3)
    @objc public static let tracecontext = DDTracingHeaderType(.tracecontext)
public protocol DDDataEncryption: AnyObject
    func encrypt(data: Data) throws -> Data
    func decrypt(data: Data) throws -> Data
public protocol DDServerDateProvider: AnyObject
    func synchronize(update: @escaping (TimeInterval) -> Void)
public class DDConfiguration: NSObject
    @objc public var clientToken: String
    @objc public var env: String
    @objc public var site: DDSite
    @objc public var service: String?
    @objc public var batchSize: DDBatchSize
    @objc public var uploadFrequency: DDUploadFrequency
    @objc public var batchProcessingLevel: DDBatchProcessingLevel
    @objc public var proxyConfiguration: [AnyHashable: Any]?
    public func setEncryption(_ encryption: DDDataEncryption)
    public func setServerDateProvider(_ serverDateProvider: DDServerDateProvider)
    @objc public var bundle: Bundle
    @objc public var additionalConfiguration: [String: Any]
    @objc public var backgroundTasksEnabled: Bool
    public init(clientToken: String, env: String)
public enum DDSDKVerbosityLevel: Int
    case none
    case debug
    case warn
    case error
    case critical
public enum DDLogLevel: Int
    case debug
    case info
    case notice
    case warn
    case error
    case critical
public class DDLogsConfiguration: NSObject
    @objc public var customEndpoint: URL?
    public init(customEndpoint: URL? = nil)
    public func setEventMapper(_ mapper: @escaping (DDLogEvent) -> DDLogEvent?)
public class DDLogs: NSObject
    public static func enable(with configuration: DDLogsConfiguration = .init())
    public static func addAttribute(forKey key: String, value: Any)
    public static func removeAttribute(forKey key: String)
public class DDLoggerConfiguration: NSObject
    @objc public var service: String?
    @objc public var name: String?
    @objc public var networkInfoEnabled: Bool
    @objc public var bundleWithRumEnabled: Bool
    @objc public var bundleWithTraceEnabled: Bool
    @objc public var remoteSampleRate: Float
    @objc public var printLogsToConsole: Bool
    @objc public var remoteLogThreshold: DDLogLevel
    public init(service: String? = nil,name: String? = nil,networkInfoEnabled: Bool = false,bundleWithRumEnabled: Bool = true,bundleWithTraceEnabled: Bool = true,remoteSampleRate: SampleRate = .maxSampleRate,remoteLogThreshold: DDLogLevel = .debug,printLogsToConsole: Bool = false)
public class DDLogger: NSObject
    public func debug(_ message: String)
    public func debug(_ message: String, attributes: [String: Any])
    public func debug(_ message: String, error: NSError, attributes: [String: Any])
    public func info(_ message: String)
    public func info(_ message: String, attributes: [String: Any])
    public func info(_ message: String, error: NSError, attributes: [String: Any])
    public func notice(_ message: String)
    public func notice(_ message: String, attributes: [String: Any])
    public func notice(_ message: String, error: NSError, attributes: [String: Any])
    public func warn(_ message: String)
    public func warn(_ message: String, attributes: [String: Any])
    public func warn(_ message: String, error: NSError, attributes: [String: Any])
    public func error(_ message: String)
    public func error(_ message: String, attributes: [String: Any])
    public func error(_ message: String, error: NSError, attributes: [String: Any])
    public func critical(_ message: String)
    public func critical(_ message: String, attributes: [String: Any])
    public func critical(_ message: String, error: NSError, attributes: [String: Any])
    public func addAttribute(forKey key: String, value: Any)
    public func removeAttribute(forKey key: String)
    public func addTag(withKey key: String, value: String)
    public func removeTag(withKey key: String)
    public func add(tag: String)
    public func remove(tag: String)
    public static func create(with configuration: DDLoggerConfiguration = .init()) -> DDLogger
public class DDLogEvent: NSObject
    @objc public var date: Date
    @objc public var status: DDLogEventStatus
    @objc public var message: String
    @objc public var error: DDLogEventError?
    @objc public var serviceName: String
    @objc public var environment: String
    @objc public var loggerName: String
    @objc public var loggerVersion: String
    @objc public var threadName: String?
    @objc public var applicationVersion: String
    @objc public var applicationBuildNumber: String
    @objc public var buildId: String?
    @objc public var variant: String?
    @objc public var dd: DDLogEventDd
    @objc public var os: DDLogEventOperatingSystem
    @objc public var userInfo: DDLogEventUserInfo
    @objc public var networkConnectionInfo: DDLogEventNetworkConnectionInfo?
    @objc public var mobileCarrierInfo: DDLogEventCarrierInfo?
    @objc public var attributes: DDLogEventAttributes
    @objc public var tags: [String]?
public enum DDLogEventStatus: Int
    case debug
    case info
    case notice
    case warn
    case error
    case critical
    case emergency
public class DDLogEventAttributes: NSObject
    @objc public var userAttributes: [String: Any]
public class DDLogEventUserInfo: NSObject
    @objc public var id: String?
    @objc public var name: String?
    @objc public var email: String?
    @objc public var extraInfo: [String: Any]
public class DDLogEventError: NSObject
    @objc public var kind: String?
    @objc public var message: String?
    @objc public var stack: String?
    @objc public var sourceType: String
    @objc public var fingerprint: String?
    @objc public var binaryImages: [DDLogEventBinaryImage]?
public class DDLogEventBinaryImage: NSObject
    @objc public var arch: String?
    @objc public var isSystem: Bool
    @objc public var loadAddress: String?
    @objc public var maxAddress: String?
    @objc public var name: String
    @objc public var uuid: String
public class DDLogEventOperatingSystem: NSObject
    @objc public var name: String
    @objc public var version: String
    @objc public var build: String?
public class DDLogEventDd: NSObject
    @objc public var device: DDLogEventDeviceInfo
public class DDLogEventDeviceInfo: NSObject
    @objc public var brand: String
    @objc public var name: String
    @objc public var model: String
    @objc public var architecture: String
public class DDLogEventNetworkConnectionInfo: NSObject
    @objc public var reachability: DDLogEventReachability
    @objc public var availableInterfaces: [Int]?
    @objc public var supportsIPv4: NSNumber?
    @objc public var supportsIPv6: NSNumber?
    @objc public var isExpensive: NSNumber?
    @objc public var isConstrained: NSNumber?
public enum DDLogEventReachability: Int
    case yes
    case maybe
    case no
public enum DDLogEventInterface: Int
    case wifi
    case wiredEthernet
    case cellular
    case loopback
    case other
public class DDLogEventCarrierInfo: NSObject
    @objc public var carrierName: String?
    @objc public var carrierISOCountryCode: String?
    @objc public var carrierAllowsVOIP: Bool
    @objc public var radioAccessTechnology: DDLogEventRadioAccessTechnology
public enum DDLogEventRadioAccessTechnology: Int
    case GPRS
    case Edge
    case WCDMA
    case HSDPA
    case HSUPA
    case CDMA1x
    case CDMAEVDORev0
    case CDMAEVDORevA
    case CDMAEVDORevB
    case eHRPD
    case LTE
    case unknown
public protocol OTSpan
    var context: OTSpanContext
    var tracer: OTTracer
    func setOperationName(_ operationName: String)
    func setTag(_ key: String, value: NSString)
    func setTag(_ key: String, numberValue: NSNumber)
    func setTag(_ key: String, boolValue: Bool)
    func log(_ fields: [String: NSObject])
    func log(_ fields: [String: NSObject], timestamp: Date?)
    func setBaggageItem(_ key: String, value: String) -> OTSpan
    func getBaggageItem(_ key: String) -> String?
    func setError(_ error: Error)
    func setError(kind: String, message: String, stack: String?)
    func finish()
    func finishWithTime(_ finishTime: Date?)
    func setActive() -> OTSpan
public protocol OTSpanContext
    func forEachBaggageItem(_ callback: (_ key: String, _ value: String) -> Bool)
public class OT: NSObject
    @objc public static let formatTextMap = "OTFormatTextMap"
public protocol OTTracer
    func startSpan(_ operationName: String) -> OTSpan
    func startSpan(_ operationName: String, tags: NSDictionary?) -> OTSpan
    func startSpan(_ operationName: String, childOf parent: OTSpanContext?) -> OTSpan
    func startSpan(_ operationName: String, childOf parent: OTSpanContext?, tags: NSDictionary?) -> OTSpan
    func startSpan(_ operationName: String, childOf parent: OTSpanContext?, tags: NSDictionary?, startTime: Date?) -> OTSpan
    func inject(_ spanContext: OTSpanContext, format: String, carrier: Any) throws
    func extractWithFormat(_ format: String, carrier: Any) throws
public class DDRUMView: NSObject
    @objc public var name: String
    @objc public var attributes: [String: Any]
    public init(name: String, attributes: [String: Any])
public protocol DDUIKitRUMViewsPredicate: AnyObject
    func rumView(for viewController: UIViewController) -> DDRUMView?
public class DDDefaultUIKitRUMViewsPredicate: NSObject, DDUIKitRUMViewsPredicate
    public func rumView(for viewController: UIViewController) -> DDRUMView?
public class DDDefaultUIKitRUMActionsPredicate: NSObject, DDUIKitRUMActionsPredicate
    public func rumAction(targetView: UIView) -> DDRUMAction?
public class DDRUMAction: NSObject
    @objc public var name: String
    @objc public var attributes: [String: Any]
    public init(name: String, attributes: [String: Any])
public protocol DDUIKitRUMActionsPredicate: DDUITouchRUMActionsPredicate
public protocol DDUITouchRUMActionsPredicate: AnyObject
    func rumAction(targetView: UIView) -> DDRUMAction?
public protocol DDUIPressRUMActionsPredicate: AnyObject
    func rumAction(press type: UIPress.PressType, targetView: UIView) -> DDRUMAction?
public enum DDRUMErrorSource: Int
    case source
    case network
    case webview
    case console
    case custom
public enum DDRUMActionType: Int
    case tap
    case scroll
    case swipe
    case custom
public enum DDRUMResourceType: Int
    case image
    case xhr
    case beacon
    case css
    case document
    case fetch
    case font
    case js
    case media
    case other
    case native
public enum DDRUMMethod: Int
    case post
    case get
    case head
    case put
    case delete
    case patch
    case connect
    case trace
    case options
public enum DDRUMVitalsFrequency: Int
    case frequent
    case average
    case rare
    case never
public class DDRUMFirstPartyHostsTracing: NSObject
    public init(hostsWithHeaderTypes: [String: Set<DDTracingHeaderType>])
    public init(hostsWithHeaderTypes: [String: Set<DDTracingHeaderType>], sampleRate: Float)
    public init(hosts: Set<String>)
    public init(hosts: Set<String>, sampleRate: Float)
public class DDRUMURLSessionTracking: NSObject
    override public init()
    public func setFirstPartyHostsTracing(_ firstPartyHostsTracing: DDRUMFirstPartyHostsTracing)
    public func setResourceAttributesProvider(_ provider: @escaping (URLRequest, URLResponse?, Data?, Error?) -> [String: Any]?)
public class DDRUMConfiguration: NSObject
    public init(applicationID: String)
    @objc public var applicationID: String
    @objc public var sessionSampleRate: Float
    @objc public var telemetrySampleRate: Float
    @objc public var uiKitViewsPredicate: DDUIKitRUMViewsPredicate?
    @objc public var uiKitActionsPredicate: DDUIKitRUMActionsPredicate?
    public func setURLSessionTracking(_ tracking: DDRUMURLSessionTracking)
    @objc public var trackFrustrations: Bool
    @objc public var trackBackgroundEvents: Bool
    @objc public var trackWatchdogTerminations: Bool
    @objc public var longTaskThreshold: TimeInterval
    @objc public var appHangThreshold: TimeInterval
    @objc public var vitalsUpdateFrequency: DDRUMVitalsFrequency
    public func setViewEventMapper(_ mapper: @escaping (DDRUMViewEvent) -> DDRUMViewEvent)
    public func setResourceEventMapper(_ mapper: @escaping (DDRUMResourceEvent) -> DDRUMResourceEvent?)
    public func setActionEventMapper(_ mapper: @escaping (DDRUMActionEvent) -> DDRUMActionEvent?)
    public func setErrorEventMapper(_ mapper: @escaping (DDRUMErrorEvent) -> DDRUMErrorEvent?)
    public func setLongTaskEventMapper(_ mapper: @escaping (DDRUMLongTaskEvent) -> DDRUMLongTaskEvent?)
    @objc public var onSessionStart: ((String, Bool) -> Void)?
    @objc public var customEndpoint: URL?
public class DDRUM: NSObject
    public static func enable(with configuration: DDRUMConfiguration)
public class DDRUMMonitor: NSObject
    public static func shared() -> DDRUMMonitor
    public func currentSessionID(completion: @escaping (String?) -> Void)
    public func stopSession()
    public func startView(viewController: UIViewController,name: String?,attributes: [String: Any])
    public func stopView(viewController: UIViewController,attributes: [String: Any])
    public func startView(key: String,name: String?,attributes: [String: Any])
    public func stopView(key: String,attributes: [String: Any])
    public func addTiming(name: String)
    public func addError(message: String,stack: String?,source: DDRUMErrorSource,attributes: [String: Any])
    public func addError(error: Error,source: DDRUMErrorSource,attributes: [String: Any])
    public func startResource(resourceKey: String,request: URLRequest,attributes: [String: Any])
    public func startResource(resourceKey: String,url: URL,attributes: [String: Any])
    public func startResource(resourceKey: String,httpMethod: DDRUMMethod,urlString: String,attributes: [String: Any])
    public func addResourceMetrics(resourceKey: String,metrics: URLSessionTaskMetrics,attributes: [String: Any])
    public func stopResource(resourceKey: String,response: URLResponse,size: NSNumber?,attributes: [String: Any])
    public func stopResource(resourceKey: String,statusCode: NSNumber?,kind: DDRUMResourceType,size: NSNumber?,attributes: [String: Any])
    public func stopResourceWithError(resourceKey: String,error: Error,response: URLResponse?,attributes: [String: Any])
    public func stopResourceWithError(resourceKey: String,message: String,response: URLResponse?,attributes: [String: Any])
    public func startAction(type: DDRUMActionType,name: String,attributes: [String: Any])
    public func stopAction(type: DDRUMActionType,name: String?,attributes: [String: Any])
    public func addAction(type: DDRUMActionType,name: String,attributes: [String: Any])
    public func addAttribute(forKey key: String,value: Any)
    public func removeAttribute(forKey key: String)
    public func addFeatureFlagEvaluation(name: String, value: Any)
    @objc public var debug: Bool
public class DDRUMActionEvent: NSObject
    @objc public var dd: DDRUMActionEventDD
    @objc public var action: DDRUMActionEventAction
    @objc public var application: DDRUMActionEventApplication
    @objc public var buildId: String?
    @objc public var buildVersion: String?
    @objc public var ciTest: DDRUMActionEventRUMCITest?
    @objc public var connectivity: DDRUMActionEventRUMConnectivity?
    @objc public var container: DDRUMActionEventContainer?
    @objc public var context: DDRUMActionEventRUMEventAttributes?
    @objc public var date: NSNumber
    @objc public var device: DDRUMActionEventRUMDevice?
    @objc public var display: DDRUMActionEventDisplay?
    @objc public var os: DDRUMActionEventRUMOperatingSystem?
    @objc public var service: String?
    @objc public var session: DDRUMActionEventSession
    @objc public var source: DDRUMActionEventSource
    @objc public var synthetics: DDRUMActionEventRUMSyntheticsTest?
    @objc public var type: String
    @objc public var usr: DDRUMActionEventRUMUser?
    @objc public var version: String?
    @objc public var view: DDRUMActionEventView
public class DDRUMActionEventDD: NSObject
    @objc public var action: DDRUMActionEventDDAction?
    @objc public var browserSdkVersion: String?
    @objc public var configuration: DDRUMActionEventDDConfiguration?
    @objc public var formatVersion: NSNumber
    @objc public var session: DDRUMActionEventDDSession?
public class DDRUMActionEventDDAction: NSObject
    @objc public var nameSource: DDRUMActionEventDDActionNameSource
    @objc public var position: DDRUMActionEventDDActionPosition?
    @objc public var target: DDRUMActionEventDDActionTarget?
public enum DDRUMActionEventDDActionNameSource: Int
    case none
    case customAttribute
    case maskPlaceholder
    case standardAttribute
    case textContent
    case maskDisallowed
    case blank
public class DDRUMActionEventDDActionPosition: NSObject
    @objc public var x: NSNumber
    @objc public var y: NSNumber
public class DDRUMActionEventDDActionTarget: NSObject
    @objc public var height: NSNumber?
    @objc public var selector: String?
    @objc public var width: NSNumber?
public class DDRUMActionEventDDConfiguration: NSObject
    @objc public var sessionReplaySampleRate: NSNumber?
    @objc public var sessionSampleRate: NSNumber
public class DDRUMActionEventDDSession: NSObject
    @objc public var plan: DDRUMActionEventDDSessionPlan
    @objc public var sessionPrecondition: DDRUMActionEventDDSessionRUMSessionPrecondition
public enum DDRUMActionEventDDSessionPlan: Int
    case none
    case plan1
    case plan2
public enum DDRUMActionEventDDSessionRUMSessionPrecondition: Int
    case none
    case userAppLaunch
    case inactivityTimeout
    case maxDuration
    case backgroundLaunch
    case prewarm
    case fromNonInteractiveSession
    case explicitStop
public class DDRUMActionEventAction: NSObject
    @objc public var crash: DDRUMActionEventActionCrash?
    @objc public var error: DDRUMActionEventActionError?
    @objc public var frustration: DDRUMActionEventActionFrustration?
    @objc public var id: String?
    @objc public var loadingTime: NSNumber?
    @objc public var longTask: DDRUMActionEventActionLongTask?
    @objc public var resource: DDRUMActionEventActionResource?
    @objc public var target: DDRUMActionEventActionTarget?
    @objc public var type: DDRUMActionEventActionActionType
public class DDRUMActionEventActionCrash: NSObject
    @objc public var count: NSNumber
public class DDRUMActionEventActionError: NSObject
    @objc public var count: NSNumber
public class DDRUMActionEventActionFrustration: NSObject
    @objc public var type: [Int]
public enum DDRUMActionEventActionFrustrationFrustrationType: Int
    case rageClick
    case deadClick
    case errorClick
    case rageTap
    case errorTap
public class DDRUMActionEventActionLongTask: NSObject
    @objc public var count: NSNumber
public class DDRUMActionEventActionResource: NSObject
    @objc public var count: NSNumber
public class DDRUMActionEventActionTarget: NSObject
    @objc public var name: String
public enum DDRUMActionEventActionActionType: Int
    case custom
    case click
    case tap
    case scroll
    case swipe
    case applicationStart
    case back
public class DDRUMActionEventApplication: NSObject
    @objc public var id: String
public class DDRUMActionEventRUMCITest: NSObject
    @objc public var testExecutionId: String
public class DDRUMActionEventRUMConnectivity: NSObject
    @objc public var cellular: DDRUMActionEventRUMConnectivityCellular?
    @objc public var effectiveType: DDRUMActionEventRUMConnectivityEffectiveType
    @objc public var interfaces: [Int]?
    @objc public var status: DDRUMActionEventRUMConnectivityStatus
public class DDRUMActionEventRUMConnectivityCellular: NSObject
    @objc public var carrierName: String?
    @objc public var technology: String?
public enum DDRUMActionEventRUMConnectivityEffectiveType: Int
    case none
    case slow2g
    case effectiveType2g
    case effectiveType3g
    case effectiveType4g
public enum DDRUMActionEventRUMConnectivityInterfaces: Int
    case none
    case bluetooth
    case cellular
    case ethernet
    case wifi
    case wimax
    case mixed
    case other
    case unknown
    case interfacesNone
public enum DDRUMActionEventRUMConnectivityStatus: Int
    case connected
    case notConnected
    case maybe
public class DDRUMActionEventContainer: NSObject
    @objc public var source: DDRUMActionEventContainerSource
    @objc public var view: DDRUMActionEventContainerView
public enum DDRUMActionEventContainerSource: Int
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    case kotlinMultiplatform
public class DDRUMActionEventContainerView: NSObject
    @objc public var id: String
public class DDRUMActionEventRUMEventAttributes: NSObject
    @objc public var contextInfo: [String: Any]
public class DDRUMActionEventRUMDevice: NSObject
    @objc public var architecture: String?
    @objc public var brand: String?
    @objc public var model: String?
    @objc public var name: String?
    @objc public var type: DDRUMActionEventRUMDeviceRUMDeviceType
public enum DDRUMActionEventRUMDeviceRUMDeviceType: Int
    case mobile
    case desktop
    case tablet
    case tv
    case gamingConsole
    case bot
    case other
public class DDRUMActionEventDisplay: NSObject
    @objc public var viewport: DDRUMActionEventDisplayViewport?
public class DDRUMActionEventDisplayViewport: NSObject
    @objc public var height: NSNumber
    @objc public var width: NSNumber
public class DDRUMActionEventRUMOperatingSystem: NSObject
    @objc public var build: String?
    @objc public var name: String
    @objc public var version: String
    @objc public var versionMajor: String
public class DDRUMActionEventSession: NSObject
    @objc public var hasReplay: NSNumber?
    @objc public var id: String
    @objc public var type: DDRUMActionEventSessionRUMSessionType
public enum DDRUMActionEventSessionRUMSessionType: Int
    case user
    case synthetics
    case ciTest
public enum DDRUMActionEventSource: Int
    case none
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    case kotlinMultiplatform
public class DDRUMActionEventRUMSyntheticsTest: NSObject
    @objc public var injected: NSNumber?
    @objc public var resultId: String
    @objc public var testId: String
public class DDRUMActionEventRUMUser: NSObject
    @objc public var anonymousId: String?
    @objc public var email: String?
    @objc public var id: String?
    @objc public var name: String?
    @objc public var usrInfo: [String: Any]
public class DDRUMActionEventView: NSObject
    @objc public var id: String
    @objc public var inForeground: NSNumber?
    @objc public var name: String?
    @objc public var referrer: String?
    @objc public var url: String
public class DDRUMErrorEvent: NSObject
    @objc public var dd: DDRUMErrorEventDD
    @objc public var action: DDRUMErrorEventAction?
    @objc public var application: DDRUMErrorEventApplication
    @objc public var buildId: String?
    @objc public var buildVersion: String?
    @objc public var ciTest: DDRUMErrorEventRUMCITest?
    @objc public var connectivity: DDRUMErrorEventRUMConnectivity?
    @objc public var container: DDRUMErrorEventContainer?
    @objc public var context: DDRUMErrorEventRUMEventAttributes?
    @objc public var date: NSNumber
    @objc public var device: DDRUMErrorEventRUMDevice?
    @objc public var display: DDRUMErrorEventDisplay?
    @objc public var error: DDRUMErrorEventError
    @objc public var featureFlags: DDRUMErrorEventFeatureFlags?
    @objc public var freeze: DDRUMErrorEventFreeze?
    @objc public var os: DDRUMErrorEventRUMOperatingSystem?
    @objc public var service: String?
    @objc public var session: DDRUMErrorEventSession
    @objc public var source: DDRUMErrorEventSource
    @objc public var synthetics: DDRUMErrorEventRUMSyntheticsTest?
    @objc public var type: String
    @objc public var usr: DDRUMErrorEventRUMUser?
    @objc public var version: String?
    @objc public var view: DDRUMErrorEventView
public class DDRUMErrorEventDD: NSObject
    @objc public var browserSdkVersion: String?
    @objc public var configuration: DDRUMErrorEventDDConfiguration?
    @objc public var formatVersion: NSNumber
    @objc public var session: DDRUMErrorEventDDSession?
public class DDRUMErrorEventDDConfiguration: NSObject
    @objc public var sessionReplaySampleRate: NSNumber?
    @objc public var sessionSampleRate: NSNumber
public class DDRUMErrorEventDDSession: NSObject
    @objc public var plan: DDRUMErrorEventDDSessionPlan
    @objc public var sessionPrecondition: DDRUMErrorEventDDSessionRUMSessionPrecondition
public enum DDRUMErrorEventDDSessionPlan: Int
    case none
    case plan1
    case plan2
public enum DDRUMErrorEventDDSessionRUMSessionPrecondition: Int
    case none
    case userAppLaunch
    case inactivityTimeout
    case maxDuration
    case backgroundLaunch
    case prewarm
    case fromNonInteractiveSession
    case explicitStop
public class DDRUMErrorEventAction: NSObject
    @objc public var id: DDRUMErrorEventActionRUMActionID
public class DDRUMErrorEventActionRUMActionID: NSObject
    @objc public var string: String?
    @objc public var stringsArray: [String]?
public class DDRUMErrorEventApplication: NSObject
    @objc public var id: String
public class DDRUMErrorEventRUMCITest: NSObject
    @objc public var testExecutionId: String
public class DDRUMErrorEventRUMConnectivity: NSObject
    @objc public var cellular: DDRUMErrorEventRUMConnectivityCellular?
    @objc public var effectiveType: DDRUMErrorEventRUMConnectivityEffectiveType
    @objc public var interfaces: [Int]?
    @objc public var status: DDRUMErrorEventRUMConnectivityStatus
public class DDRUMErrorEventRUMConnectivityCellular: NSObject
    @objc public var carrierName: String?
    @objc public var technology: String?
public enum DDRUMErrorEventRUMConnectivityEffectiveType: Int
    case none
    case slow2g
    case effectiveType2g
    case effectiveType3g
    case effectiveType4g
public enum DDRUMErrorEventRUMConnectivityInterfaces: Int
    case none
    case bluetooth
    case cellular
    case ethernet
    case wifi
    case wimax
    case mixed
    case other
    case unknown
    case interfacesNone
public enum DDRUMErrorEventRUMConnectivityStatus: Int
    case connected
    case notConnected
    case maybe
public class DDRUMErrorEventContainer: NSObject
    @objc public var source: DDRUMErrorEventContainerSource
    @objc public var view: DDRUMErrorEventContainerView
public enum DDRUMErrorEventContainerSource: Int
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    case kotlinMultiplatform
public class DDRUMErrorEventContainerView: NSObject
    @objc public var id: String
public class DDRUMErrorEventRUMEventAttributes: NSObject
    @objc public var contextInfo: [String: Any]
public class DDRUMErrorEventRUMDevice: NSObject
    @objc public var architecture: String?
    @objc public var brand: String?
    @objc public var model: String?
    @objc public var name: String?
    @objc public var type: DDRUMErrorEventRUMDeviceRUMDeviceType
public enum DDRUMErrorEventRUMDeviceRUMDeviceType: Int
    case mobile
    case desktop
    case tablet
    case tv
    case gamingConsole
    case bot
    case other
public class DDRUMErrorEventDisplay: NSObject
    @objc public var viewport: DDRUMErrorEventDisplayViewport?
public class DDRUMErrorEventDisplayViewport: NSObject
    @objc public var height: NSNumber
    @objc public var width: NSNumber
public class DDRUMErrorEventError: NSObject
    @objc public var binaryImages: [DDRUMErrorEventErrorBinaryImages]?
    @objc public var category: DDRUMErrorEventErrorCategory
    @objc public var causes: [DDRUMErrorEventErrorCauses]?
    @objc public var csp: DDRUMErrorEventErrorCSP?
    @objc public var fingerprint: String?
    @objc public var handling: DDRUMErrorEventErrorHandling
    @objc public var handlingStack: String?
    @objc public var id: String?
    @objc public var isCrash: NSNumber?
    @objc public var message: String
    @objc public var meta: DDRUMErrorEventErrorMeta?
    @objc public var resource: DDRUMErrorEventErrorResource?
    @objc public var source: DDRUMErrorEventErrorSource
    @objc public var sourceType: DDRUMErrorEventErrorSourceType
    @objc public var stack: String?
    @objc public var threads: [DDRUMErrorEventErrorThreads]?
    @objc public var timeSinceAppStart: NSNumber?
    @objc public var type: String?
    @objc public var wasTruncated: NSNumber?
public class DDRUMErrorEventErrorBinaryImages: NSObject
    @objc public var arch: String?
    @objc public var isSystem: NSNumber
    @objc public var loadAddress: String?
    @objc public var maxAddress: String?
    @objc public var name: String
    @objc public var uuid: String
public enum DDRUMErrorEventErrorCategory: Int
    case none
    case aNR
    case appHang
    case exception
    case watchdogTermination
    case memoryWarning
public class DDRUMErrorEventErrorCauses: NSObject
    @objc public var message: String
    @objc public var source: DDRUMErrorEventErrorCausesSource
    @objc public var stack: String?
    @objc public var type: String?
public enum DDRUMErrorEventErrorCausesSource: Int
    case network
    case source
    case console
    case logger
    case agent
    case webview
    case custom
    case report
public class DDRUMErrorEventErrorCSP: NSObject
    @objc public var disposition: DDRUMErrorEventErrorCSPDisposition
public enum DDRUMErrorEventErrorCSPDisposition: Int
    case none
    case enforce
    case report
public enum DDRUMErrorEventErrorHandling: Int
    case none
    case handled
    case unhandled
public class DDRUMErrorEventErrorMeta: NSObject
    @objc public var codeType: String?
    @objc public var exceptionCodes: String?
    @objc public var exceptionType: String?
    @objc public var incidentIdentifier: String?
    @objc public var parentProcess: String?
    @objc public var path: String?
    @objc public var process: String?
public class DDRUMErrorEventErrorResource: NSObject
    @objc public var method: DDRUMErrorEventErrorResourceRUMMethod
    @objc public var provider: DDRUMErrorEventErrorResourceProvider?
    @objc public var statusCode: NSNumber
    @objc public var url: String
public enum DDRUMErrorEventErrorResourceRUMMethod: Int
    case post
    case get
    case head
    case put
    case delete
    case patch
    case trace
    case options
    case connect
public class DDRUMErrorEventErrorResourceProvider: NSObject
    @objc public var domain: String?
    @objc public var name: String?
    @objc public var type: DDRUMErrorEventErrorResourceProviderProviderType
public enum DDRUMErrorEventErrorResourceProviderProviderType: Int
    case none
    case ad
    case advertising
    case analytics
    case cdn
    case content
    case customerSuccess
    case firstParty
    case hosting
    case marketing
    case other
    case social
    case tagManager
    case utility
    case video
public enum DDRUMErrorEventErrorSource: Int
    case network
    case source
    case console
    case logger
    case agent
    case webview
    case custom
    case report
public enum DDRUMErrorEventErrorSourceType: Int
    case none
    case android
    case browser
    case ios
    case reactNative
    case flutter
    case roku
    case ndk
    case iosIl2cpp
    case ndkIl2cpp
public class DDRUMErrorEventErrorThreads: NSObject
    @objc public var crashed: NSNumber
    @objc public var name: String
    @objc public var stack: String
    @objc public var state: String?
public class DDRUMErrorEventFeatureFlags: NSObject
    @objc public var featureFlagsInfo: [String: Any]
public class DDRUMErrorEventFreeze: NSObject
    @objc public var duration: NSNumber
public class DDRUMErrorEventRUMOperatingSystem: NSObject
    @objc public var build: String?
    @objc public var name: String
    @objc public var version: String
    @objc public var versionMajor: String
public class DDRUMErrorEventSession: NSObject
    @objc public var hasReplay: NSNumber?
    @objc public var id: String
    @objc public var type: DDRUMErrorEventSessionRUMSessionType
public enum DDRUMErrorEventSessionRUMSessionType: Int
    case user
    case synthetics
    case ciTest
public enum DDRUMErrorEventSource: Int
    case none
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    case kotlinMultiplatform
public class DDRUMErrorEventRUMSyntheticsTest: NSObject
    @objc public var injected: NSNumber?
    @objc public var resultId: String
    @objc public var testId: String
public class DDRUMErrorEventRUMUser: NSObject
    @objc public var anonymousId: String?
    @objc public var email: String?
    @objc public var id: String?
    @objc public var name: String?
    @objc public var usrInfo: [String: Any]
public class DDRUMErrorEventView: NSObject
    @objc public var id: String
    @objc public var inForeground: NSNumber?
    @objc public var name: String?
    @objc public var referrer: String?
    @objc public var url: String
public class DDRUMLongTaskEvent: NSObject
    @objc public var dd: DDRUMLongTaskEventDD
    @objc public var action: DDRUMLongTaskEventAction?
    @objc public var application: DDRUMLongTaskEventApplication
    @objc public var buildId: String?
    @objc public var buildVersion: String?
    @objc public var ciTest: DDRUMLongTaskEventRUMCITest?
    @objc public var connectivity: DDRUMLongTaskEventRUMConnectivity?
    @objc public var container: DDRUMLongTaskEventContainer?
    @objc public var context: DDRUMLongTaskEventRUMEventAttributes?
    @objc public var date: NSNumber
    @objc public var device: DDRUMLongTaskEventRUMDevice?
    @objc public var display: DDRUMLongTaskEventDisplay?
    @objc public var longTask: DDRUMLongTaskEventLongTask
    @objc public var os: DDRUMLongTaskEventRUMOperatingSystem?
    @objc public var service: String?
    @objc public var session: DDRUMLongTaskEventSession
    @objc public var source: DDRUMLongTaskEventSource
    @objc public var synthetics: DDRUMLongTaskEventRUMSyntheticsTest?
    @objc public var type: String
    @objc public var usr: DDRUMLongTaskEventRUMUser?
    @objc public var version: String?
    @objc public var view: DDRUMLongTaskEventView
public class DDRUMLongTaskEventDD: NSObject
    @objc public var browserSdkVersion: String?
    @objc public var configuration: DDRUMLongTaskEventDDConfiguration?
    @objc public var discarded: NSNumber?
    @objc public var formatVersion: NSNumber
    @objc public var session: DDRUMLongTaskEventDDSession?
public class DDRUMLongTaskEventDDConfiguration: NSObject
    @objc public var sessionReplaySampleRate: NSNumber?
    @objc public var sessionSampleRate: NSNumber
public class DDRUMLongTaskEventDDSession: NSObject
    @objc public var plan: DDRUMLongTaskEventDDSessionPlan
    @objc public var sessionPrecondition: DDRUMLongTaskEventDDSessionRUMSessionPrecondition
public enum DDRUMLongTaskEventDDSessionPlan: Int
    case none
    case plan1
    case plan2
public enum DDRUMLongTaskEventDDSessionRUMSessionPrecondition: Int
    case none
    case userAppLaunch
    case inactivityTimeout
    case maxDuration
    case backgroundLaunch
    case prewarm
    case fromNonInteractiveSession
    case explicitStop
public class DDRUMLongTaskEventAction: NSObject
    @objc public var id: DDRUMLongTaskEventActionRUMActionID
public class DDRUMLongTaskEventActionRUMActionID: NSObject
    @objc public var string: String?
    @objc public var stringsArray: [String]?
public class DDRUMLongTaskEventApplication: NSObject
    @objc public var id: String
public class DDRUMLongTaskEventRUMCITest: NSObject
    @objc public var testExecutionId: String
public class DDRUMLongTaskEventRUMConnectivity: NSObject
    @objc public var cellular: DDRUMLongTaskEventRUMConnectivityCellular?
    @objc public var effectiveType: DDRUMLongTaskEventRUMConnectivityEffectiveType
    @objc public var interfaces: [Int]?
    @objc public var status: DDRUMLongTaskEventRUMConnectivityStatus
public class DDRUMLongTaskEventRUMConnectivityCellular: NSObject
    @objc public var carrierName: String?
    @objc public var technology: String?
public enum DDRUMLongTaskEventRUMConnectivityEffectiveType: Int
    case none
    case slow2g
    case effectiveType2g
    case effectiveType3g
    case effectiveType4g
public enum DDRUMLongTaskEventRUMConnectivityInterfaces: Int
    case none
    case bluetooth
    case cellular
    case ethernet
    case wifi
    case wimax
    case mixed
    case other
    case unknown
    case interfacesNone
public enum DDRUMLongTaskEventRUMConnectivityStatus: Int
    case connected
    case notConnected
    case maybe
public class DDRUMLongTaskEventContainer: NSObject
    @objc public var source: DDRUMLongTaskEventContainerSource
    @objc public var view: DDRUMLongTaskEventContainerView
public enum DDRUMLongTaskEventContainerSource: Int
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    case kotlinMultiplatform
public class DDRUMLongTaskEventContainerView: NSObject
    @objc public var id: String
public class DDRUMLongTaskEventRUMEventAttributes: NSObject
    @objc public var contextInfo: [String: Any]
public class DDRUMLongTaskEventRUMDevice: NSObject
    @objc public var architecture: String?
    @objc public var brand: String?
    @objc public var model: String?
    @objc public var name: String?
    @objc public var type: DDRUMLongTaskEventRUMDeviceRUMDeviceType
public enum DDRUMLongTaskEventRUMDeviceRUMDeviceType: Int
    case mobile
    case desktop
    case tablet
    case tv
    case gamingConsole
    case bot
    case other
public class DDRUMLongTaskEventDisplay: NSObject
    @objc public var viewport: DDRUMLongTaskEventDisplayViewport?
public class DDRUMLongTaskEventDisplayViewport: NSObject
    @objc public var height: NSNumber
    @objc public var width: NSNumber
public class DDRUMLongTaskEventLongTask: NSObject
    @objc public var blockingDuration: NSNumber?
    @objc public var duration: NSNumber
    @objc public var entryType: DDRUMLongTaskEventLongTaskEntryType
    @objc public var firstUiEventTimestamp: NSNumber?
    @objc public var id: String?
    @objc public var isFrozenFrame: NSNumber?
    @objc public var renderStart: NSNumber?
    @objc public var scripts: [DDRUMLongTaskEventLongTaskScripts]?
    @objc public var startTime: NSNumber?
    @objc public var styleAndLayoutStart: NSNumber?
public enum DDRUMLongTaskEventLongTaskEntryType: Int
    case none
    case longTask
    case longAnimationFrame
public class DDRUMLongTaskEventLongTaskScripts: NSObject
    @objc public var duration: NSNumber?
    @objc public var executionStart: NSNumber?
    @objc public var forcedStyleAndLayoutDuration: NSNumber?
    @objc public var invoker: String?
    @objc public var invokerType: DDRUMLongTaskEventLongTaskScriptsInvokerType
    @objc public var pauseDuration: NSNumber?
    @objc public var sourceCharPosition: NSNumber?
    @objc public var sourceFunctionName: String?
    @objc public var sourceUrl: String?
    @objc public var startTime: NSNumber?
    @objc public var windowAttribution: String?
public enum DDRUMLongTaskEventLongTaskScriptsInvokerType: Int
    case none
    case userCallback
    case eventListener
    case resolvePromise
    case rejectPromise
    case classicScript
    case moduleScript
public class DDRUMLongTaskEventRUMOperatingSystem: NSObject
    @objc public var build: String?
    @objc public var name: String
    @objc public var version: String
    @objc public var versionMajor: String
public class DDRUMLongTaskEventSession: NSObject
    @objc public var hasReplay: NSNumber?
    @objc public var id: String
    @objc public var type: DDRUMLongTaskEventSessionRUMSessionType
public enum DDRUMLongTaskEventSessionRUMSessionType: Int
    case user
    case synthetics
    case ciTest
public enum DDRUMLongTaskEventSource: Int
    case none
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    case kotlinMultiplatform
public class DDRUMLongTaskEventRUMSyntheticsTest: NSObject
    @objc public var injected: NSNumber?
    @objc public var resultId: String
    @objc public var testId: String
public class DDRUMLongTaskEventRUMUser: NSObject
    @objc public var anonymousId: String?
    @objc public var email: String?
    @objc public var id: String?
    @objc public var name: String?
    @objc public var usrInfo: [String: Any]
public class DDRUMLongTaskEventView: NSObject
    @objc public var id: String
    @objc public var name: String?
    @objc public var referrer: String?
    @objc public var url: String
public class DDRUMResourceEvent: NSObject
    @objc public var dd: DDRUMResourceEventDD
    @objc public var action: DDRUMResourceEventAction?
    @objc public var application: DDRUMResourceEventApplication
    @objc public var buildId: String?
    @objc public var buildVersion: String?
    @objc public var ciTest: DDRUMResourceEventRUMCITest?
    @objc public var connectivity: DDRUMResourceEventRUMConnectivity?
    @objc public var container: DDRUMResourceEventContainer?
    @objc public var context: DDRUMResourceEventRUMEventAttributes?
    @objc public var date: NSNumber
    @objc public var device: DDRUMResourceEventRUMDevice?
    @objc public var display: DDRUMResourceEventDisplay?
    @objc public var os: DDRUMResourceEventRUMOperatingSystem?
    @objc public var resource: DDRUMResourceEventResource
    @objc public var service: String?
    @objc public var session: DDRUMResourceEventSession
    @objc public var source: DDRUMResourceEventSource
    @objc public var synthetics: DDRUMResourceEventRUMSyntheticsTest?
    @objc public var type: String
    @objc public var usr: DDRUMResourceEventRUMUser?
    @objc public var version: String?
    @objc public var view: DDRUMResourceEventView
public class DDRUMResourceEventDD: NSObject
    @objc public var browserSdkVersion: String?
    @objc public var configuration: DDRUMResourceEventDDConfiguration?
    @objc public var discarded: NSNumber?
    @objc public var formatVersion: NSNumber
    @objc public var rulePsr: NSNumber?
    @objc public var session: DDRUMResourceEventDDSession?
    @objc public var spanId: String?
    @objc public var traceId: String?
public class DDRUMResourceEventDDConfiguration: NSObject
    @objc public var sessionReplaySampleRate: NSNumber?
    @objc public var sessionSampleRate: NSNumber
public class DDRUMResourceEventDDSession: NSObject
    @objc public var plan: DDRUMResourceEventDDSessionPlan
    @objc public var sessionPrecondition: DDRUMResourceEventDDSessionRUMSessionPrecondition
public enum DDRUMResourceEventDDSessionPlan: Int
    case none
    case plan1
    case plan2
public enum DDRUMResourceEventDDSessionRUMSessionPrecondition: Int
    case none
    case userAppLaunch
    case inactivityTimeout
    case maxDuration
    case backgroundLaunch
    case prewarm
    case fromNonInteractiveSession
    case explicitStop
public class DDRUMResourceEventAction: NSObject
    @objc public var id: DDRUMResourceEventActionRUMActionID
public class DDRUMResourceEventActionRUMActionID: NSObject
    @objc public var string: String?
    @objc public var stringsArray: [String]?
public class DDRUMResourceEventApplication: NSObject
    @objc public var id: String
public class DDRUMResourceEventRUMCITest: NSObject
    @objc public var testExecutionId: String
public class DDRUMResourceEventRUMConnectivity: NSObject
    @objc public var cellular: DDRUMResourceEventRUMConnectivityCellular?
    @objc public var effectiveType: DDRUMResourceEventRUMConnectivityEffectiveType
    @objc public var interfaces: [Int]?
    @objc public var status: DDRUMResourceEventRUMConnectivityStatus
public class DDRUMResourceEventRUMConnectivityCellular: NSObject
    @objc public var carrierName: String?
    @objc public var technology: String?
public enum DDRUMResourceEventRUMConnectivityEffectiveType: Int
    case none
    case slow2g
    case effectiveType2g
    case effectiveType3g
    case effectiveType4g
public enum DDRUMResourceEventRUMConnectivityInterfaces: Int
    case none
    case bluetooth
    case cellular
    case ethernet
    case wifi
    case wimax
    case mixed
    case other
    case unknown
    case interfacesNone
public enum DDRUMResourceEventRUMConnectivityStatus: Int
    case connected
    case notConnected
    case maybe
public class DDRUMResourceEventContainer: NSObject
    @objc public var source: DDRUMResourceEventContainerSource
    @objc public var view: DDRUMResourceEventContainerView
public enum DDRUMResourceEventContainerSource: Int
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    case kotlinMultiplatform
public class DDRUMResourceEventContainerView: NSObject
    @objc public var id: String
public class DDRUMResourceEventRUMEventAttributes: NSObject
    @objc public var contextInfo: [String: Any]
public class DDRUMResourceEventRUMDevice: NSObject
    @objc public var architecture: String?
    @objc public var brand: String?
    @objc public var model: String?
    @objc public var name: String?
    @objc public var type: DDRUMResourceEventRUMDeviceRUMDeviceType
public enum DDRUMResourceEventRUMDeviceRUMDeviceType: Int
    case mobile
    case desktop
    case tablet
    case tv
    case gamingConsole
    case bot
    case other
public class DDRUMResourceEventDisplay: NSObject
    @objc public var viewport: DDRUMResourceEventDisplayViewport?
public class DDRUMResourceEventDisplayViewport: NSObject
    @objc public var height: NSNumber
    @objc public var width: NSNumber
public class DDRUMResourceEventRUMOperatingSystem: NSObject
    @objc public var build: String?
    @objc public var name: String
    @objc public var version: String
    @objc public var versionMajor: String
public class DDRUMResourceEventResource: NSObject
    @objc public var connect: DDRUMResourceEventResourceConnect?
    @objc public var decodedBodySize: NSNumber?
    @objc public var deliveryType: DDRUMResourceEventResourceDeliveryType
    @objc public var dns: DDRUMResourceEventResourceDNS?
    @objc public var download: DDRUMResourceEventResourceDownload?
    @objc public var duration: NSNumber?
    @objc public var encodedBodySize: NSNumber?
    @objc public var firstByte: DDRUMResourceEventResourceFirstByte?
    @objc public var graphql: DDRUMResourceEventResourceGraphql?
    @objc public var id: String?
    @objc public var method: DDRUMResourceEventResourceRUMMethod
    @objc public var `protocol`: String?
    @objc public var provider: DDRUMResourceEventResourceProvider?
    @objc public var redirect: DDRUMResourceEventResourceRedirect?
    @objc public var renderBlockingStatus: DDRUMResourceEventResourceRenderBlockingStatus
    @objc public var size: NSNumber?
    @objc public var ssl: DDRUMResourceEventResourceSSL?
    @objc public var statusCode: NSNumber?
    @objc public var transferSize: NSNumber?
    @objc public var type: DDRUMResourceEventResourceResourceType
    @objc public var url: String
    @objc public var worker: DDRUMResourceEventResourceWorker?
public class DDRUMResourceEventResourceConnect: NSObject
    @objc public var duration: NSNumber
    @objc public var start: NSNumber
public enum DDRUMResourceEventResourceDeliveryType: Int
    case none
    case cache
    case navigationalPrefetch
    case other
public class DDRUMResourceEventResourceDNS: NSObject
    @objc public var duration: NSNumber
    @objc public var start: NSNumber
public class DDRUMResourceEventResourceDownload: NSObject
    @objc public var duration: NSNumber
    @objc public var start: NSNumber
public class DDRUMResourceEventResourceFirstByte: NSObject
    @objc public var duration: NSNumber
    @objc public var start: NSNumber
public class DDRUMResourceEventResourceGraphql: NSObject
    @objc public var operationName: String?
    @objc public var operationType: DDRUMResourceEventResourceGraphqlOperationType
    @objc public var payload: String?
    @objc public var variables: String?
public enum DDRUMResourceEventResourceGraphqlOperationType: Int
    case query
    case mutation
    case subscription
public enum DDRUMResourceEventResourceRUMMethod: Int
    case none
    case post
    case get
    case head
    case put
    case delete
    case patch
    case trace
    case options
    case connect
public class DDRUMResourceEventResourceProvider: NSObject
    @objc public var domain: String?
    @objc public var name: String?
    @objc public var type: DDRUMResourceEventResourceProviderProviderType
public enum DDRUMResourceEventResourceProviderProviderType: Int
    case none
    case ad
    case advertising
    case analytics
    case cdn
    case content
    case customerSuccess
    case firstParty
    case hosting
    case marketing
    case other
    case social
    case tagManager
    case utility
    case video
public class DDRUMResourceEventResourceRedirect: NSObject
    @objc public var duration: NSNumber
    @objc public var start: NSNumber
public enum DDRUMResourceEventResourceRenderBlockingStatus: Int
    case none
    case blocking
    case nonBlocking
public class DDRUMResourceEventResourceSSL: NSObject
    @objc public var duration: NSNumber
    @objc public var start: NSNumber
public enum DDRUMResourceEventResourceResourceType: Int
    case document
    case xhr
    case beacon
    case fetch
    case css
    case js
    case image
    case font
    case media
    case other
    case native
public class DDRUMResourceEventResourceWorker: NSObject
    @objc public var duration: NSNumber
    @objc public var start: NSNumber
public class DDRUMResourceEventSession: NSObject
    @objc public var hasReplay: NSNumber?
    @objc public var id: String
    @objc public var type: DDRUMResourceEventSessionRUMSessionType
public enum DDRUMResourceEventSessionRUMSessionType: Int
    case user
    case synthetics
    case ciTest
public enum DDRUMResourceEventSource: Int
    case none
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    case kotlinMultiplatform
public class DDRUMResourceEventRUMSyntheticsTest: NSObject
    @objc public var injected: NSNumber?
    @objc public var resultId: String
    @objc public var testId: String
public class DDRUMResourceEventRUMUser: NSObject
    @objc public var anonymousId: String?
    @objc public var email: String?
    @objc public var id: String?
    @objc public var name: String?
    @objc public var usrInfo: [String: Any]
public class DDRUMResourceEventView: NSObject
    @objc public var id: String
    @objc public var name: String?
    @objc public var referrer: String?
    @objc public var url: String
public class DDRUMViewEvent: NSObject
    @objc public var dd: DDRUMViewEventDD
    @objc public var application: DDRUMViewEventApplication
    @objc public var buildId: String?
    @objc public var buildVersion: String?
    @objc public var ciTest: DDRUMViewEventRUMCITest?
    @objc public var connectivity: DDRUMViewEventRUMConnectivity?
    @objc public var container: DDRUMViewEventContainer?
    @objc public var context: DDRUMViewEventRUMEventAttributes?
    @objc public var date: NSNumber
    @objc public var device: DDRUMViewEventRUMDevice?
    @objc public var display: DDRUMViewEventDisplay?
    @objc public var featureFlags: DDRUMViewEventFeatureFlags?
    @objc public var os: DDRUMViewEventRUMOperatingSystem?
    @objc public var privacy: DDRUMViewEventPrivacy?
    @objc public var service: String?
    @objc public var session: DDRUMViewEventSession
    @objc public var source: DDRUMViewEventSource
    @objc public var synthetics: DDRUMViewEventRUMSyntheticsTest?
    @objc public var type: String
    @objc public var usr: DDRUMViewEventRUMUser?
    @objc public var version: String?
    @objc public var view: DDRUMViewEventView
public class DDRUMViewEventDD: NSObject
    @objc public var browserSdkVersion: String?
    @objc public var configuration: DDRUMViewEventDDConfiguration?
    @objc public var documentVersion: NSNumber
    @objc public var formatVersion: NSNumber
    @objc public var pageStates: [DDRUMViewEventDDPageStates]?
    @objc public var replayStats: DDRUMViewEventDDReplayStats?
    @objc public var session: DDRUMViewEventDDSession?
public class DDRUMViewEventDDConfiguration: NSObject
    @objc public var sessionReplaySampleRate: NSNumber?
    @objc public var sessionSampleRate: NSNumber
    @objc public var startSessionReplayRecordingManually: NSNumber?
public class DDRUMViewEventDDPageStates: NSObject
    @objc public var start: NSNumber
    @objc public var state: DDRUMViewEventDDPageStatesState
public enum DDRUMViewEventDDPageStatesState: Int
    case active
    case passive
    case hidden
    case frozen
    case terminated
public class DDRUMViewEventDDReplayStats: NSObject
    @objc public var recordsCount: NSNumber?
    @objc public var segmentsCount: NSNumber?
    @objc public var segmentsTotalRawSize: NSNumber?
public class DDRUMViewEventDDSession: NSObject
    @objc public var plan: DDRUMViewEventDDSessionPlan
    @objc public var sessionPrecondition: DDRUMViewEventDDSessionRUMSessionPrecondition
public enum DDRUMViewEventDDSessionPlan: Int
    case none
    case plan1
    case plan2
public enum DDRUMViewEventDDSessionRUMSessionPrecondition: Int
    case none
    case userAppLaunch
    case inactivityTimeout
    case maxDuration
    case backgroundLaunch
    case prewarm
    case fromNonInteractiveSession
    case explicitStop
public class DDRUMViewEventApplication: NSObject
    @objc public var id: String
public class DDRUMViewEventRUMCITest: NSObject
    @objc public var testExecutionId: String
public class DDRUMViewEventRUMConnectivity: NSObject
    @objc public var cellular: DDRUMViewEventRUMConnectivityCellular?
    @objc public var effectiveType: DDRUMViewEventRUMConnectivityEffectiveType
    @objc public var interfaces: [Int]?
    @objc public var status: DDRUMViewEventRUMConnectivityStatus
public class DDRUMViewEventRUMConnectivityCellular: NSObject
    @objc public var carrierName: String?
    @objc public var technology: String?
public enum DDRUMViewEventRUMConnectivityEffectiveType: Int
    case none
    case slow2g
    case effectiveType2g
    case effectiveType3g
    case effectiveType4g
public enum DDRUMViewEventRUMConnectivityInterfaces: Int
    case none
    case bluetooth
    case cellular
    case ethernet
    case wifi
    case wimax
    case mixed
    case other
    case unknown
    case interfacesNone
public enum DDRUMViewEventRUMConnectivityStatus: Int
    case connected
    case notConnected
    case maybe
public class DDRUMViewEventContainer: NSObject
    @objc public var source: DDRUMViewEventContainerSource
    @objc public var view: DDRUMViewEventContainerView
public enum DDRUMViewEventContainerSource: Int
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    case kotlinMultiplatform
public class DDRUMViewEventContainerView: NSObject
    @objc public var id: String
public class DDRUMViewEventRUMEventAttributes: NSObject
    @objc public var contextInfo: [String: Any]
public class DDRUMViewEventRUMDevice: NSObject
    @objc public var architecture: String?
    @objc public var brand: String?
    @objc public var model: String?
    @objc public var name: String?
    @objc public var type: DDRUMViewEventRUMDeviceRUMDeviceType
public enum DDRUMViewEventRUMDeviceRUMDeviceType: Int
    case mobile
    case desktop
    case tablet
    case tv
    case gamingConsole
    case bot
    case other
public class DDRUMViewEventDisplay: NSObject
    @objc public var scroll: DDRUMViewEventDisplayScroll?
    @objc public var viewport: DDRUMViewEventDisplayViewport?
public class DDRUMViewEventDisplayScroll: NSObject
    @objc public var maxDepth: NSNumber
    @objc public var maxDepthScrollTop: NSNumber
    @objc public var maxScrollHeight: NSNumber
    @objc public var maxScrollHeightTime: NSNumber
public class DDRUMViewEventDisplayViewport: NSObject
    @objc public var height: NSNumber
    @objc public var width: NSNumber
public class DDRUMViewEventFeatureFlags: NSObject
    @objc public var featureFlagsInfo: [String: Any]
public class DDRUMViewEventRUMOperatingSystem: NSObject
    @objc public var build: String?
    @objc public var name: String
    @objc public var version: String
    @objc public var versionMajor: String
public class DDRUMViewEventPrivacy: NSObject
    @objc public var replayLevel: DDRUMViewEventPrivacyReplayLevel
public enum DDRUMViewEventPrivacyReplayLevel: Int
    case allow
    case mask
    case maskUserInput
public class DDRUMViewEventSession: NSObject
    @objc public var hasReplay: NSNumber?
    @objc public var id: String
    @objc public var isActive: NSNumber?
    @objc public var sampledForReplay: NSNumber?
    @objc public var type: DDRUMViewEventSessionRUMSessionType
public enum DDRUMViewEventSessionRUMSessionType: Int
    case user
    case synthetics
    case ciTest
public enum DDRUMViewEventSource: Int
    case none
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    case kotlinMultiplatform
public class DDRUMViewEventRUMSyntheticsTest: NSObject
    @objc public var injected: NSNumber?
    @objc public var resultId: String
    @objc public var testId: String
public class DDRUMViewEventRUMUser: NSObject
    @objc public var anonymousId: String?
    @objc public var email: String?
    @objc public var id: String?
    @objc public var name: String?
    @objc public var usrInfo: [String: Any]
public class DDRUMViewEventView: NSObject
    @objc public var action: DDRUMViewEventViewAction
    @objc public var cpuTicksCount: NSNumber?
    @objc public var cpuTicksPerSecond: NSNumber?
    @objc public var crash: DDRUMViewEventViewCrash?
    @objc public var cumulativeLayoutShift: NSNumber?
    @objc public var cumulativeLayoutShiftTargetSelector: String?
    @objc public var cumulativeLayoutShiftTime: NSNumber?
    @objc public var customTimings: [String: NSNumber]?
    @objc public var domComplete: NSNumber?
    @objc public var domContentLoaded: NSNumber?
    @objc public var domInteractive: NSNumber?
    @objc public var error: DDRUMViewEventViewError
    @objc public var firstByte: NSNumber?
    @objc public var firstContentfulPaint: NSNumber?
    @objc public var firstInputDelay: NSNumber?
    @objc public var firstInputTargetSelector: String?
    @objc public var firstInputTime: NSNumber?
    @objc public var flutterBuildTime: DDRUMViewEventViewFlutterBuildTime?
    @objc public var flutterRasterTime: DDRUMViewEventViewFlutterRasterTime?
    @objc public var frozenFrame: DDRUMViewEventViewFrozenFrame?
    @objc public var frustration: DDRUMViewEventViewFrustration?
    @objc public var id: String
    @objc public var inForegroundPeriods: [DDRUMViewEventViewInForegroundPeriods]?
    @objc public var interactionToNextPaint: NSNumber?
    @objc public var interactionToNextPaintTargetSelector: String?
    @objc public var interactionToNextPaintTime: NSNumber?
    @objc public var interactionToNextViewTime: NSNumber?
    @objc public var isActive: NSNumber?
    @objc public var isSlowRendered: NSNumber?
    @objc public var jsRefreshRate: DDRUMViewEventViewJsRefreshRate?
    @objc public var largestContentfulPaint: NSNumber?
    @objc public var largestContentfulPaintTargetSelector: String?
    @objc public var loadEvent: NSNumber?
    @objc public var loadingTime: NSNumber?
    @objc public var loadingType: DDRUMViewEventViewLoadingType
    @objc public var longTask: DDRUMViewEventViewLongTask?
    @objc public var memoryAverage: NSNumber?
    @objc public var memoryMax: NSNumber?
    @objc public var name: String?
    @objc public var networkSettledTime: NSNumber?
    @objc public var referrer: String?
    @objc public var refreshRateAverage: NSNumber?
    @objc public var refreshRateMin: NSNumber?
    @objc public var resource: DDRUMViewEventViewResource
    @objc public var timeSpent: NSNumber
    @objc public var url: String
public class DDRUMViewEventViewAction: NSObject
    @objc public var count: NSNumber
public class DDRUMViewEventViewCrash: NSObject
    @objc public var count: NSNumber
public class DDRUMViewEventViewError: NSObject
    @objc public var count: NSNumber
public class DDRUMViewEventViewFlutterBuildTime: NSObject
    @objc public var average: NSNumber
    @objc public var max: NSNumber
    @objc public var metricMax: NSNumber?
    @objc public var min: NSNumber
public class DDRUMViewEventViewFlutterRasterTime: NSObject
    @objc public var average: NSNumber
    @objc public var max: NSNumber
    @objc public var metricMax: NSNumber?
    @objc public var min: NSNumber
public class DDRUMViewEventViewFrozenFrame: NSObject
    @objc public var count: NSNumber
public class DDRUMViewEventViewFrustration: NSObject
    @objc public var count: NSNumber
public class DDRUMViewEventViewInForegroundPeriods: NSObject
    @objc public var duration: NSNumber
    @objc public var start: NSNumber
public class DDRUMViewEventViewJsRefreshRate: NSObject
    @objc public var average: NSNumber
    @objc public var max: NSNumber
    @objc public var metricMax: NSNumber?
    @objc public var min: NSNumber
public enum DDRUMViewEventViewLoadingType: Int
    case none
    case initialLoad
    case routeChange
    case activityDisplay
    case activityRedisplay
    case fragmentDisplay
    case fragmentRedisplay
    case viewControllerDisplay
    case viewControllerRedisplay
public class DDRUMViewEventViewLongTask: NSObject
    @objc public var count: NSNumber
public class DDRUMViewEventViewResource: NSObject
    @objc public var count: NSNumber
public class DDRUMVitalEvent: NSObject
    @objc public var dd: DDRUMVitalEventDD
    @objc public var application: DDRUMVitalEventApplication
    @objc public var buildId: String?
    @objc public var buildVersion: String?
    @objc public var ciTest: DDRUMVitalEventRUMCITest?
    @objc public var connectivity: DDRUMVitalEventRUMConnectivity?
    @objc public var container: DDRUMVitalEventContainer?
    @objc public var context: DDRUMVitalEventRUMEventAttributes?
    @objc public var date: NSNumber
    @objc public var device: DDRUMVitalEventRUMDevice?
    @objc public var display: DDRUMVitalEventDisplay?
    @objc public var os: DDRUMVitalEventRUMOperatingSystem?
    @objc public var service: String?
    @objc public var session: DDRUMVitalEventSession
    @objc public var source: DDRUMVitalEventSource
    @objc public var synthetics: DDRUMVitalEventRUMSyntheticsTest?
    @objc public var type: String
    @objc public var usr: DDRUMVitalEventRUMUser?
    @objc public var version: String?
    @objc public var view: DDRUMVitalEventView
    @objc public var vital: DDRUMVitalEventVital
public class DDRUMVitalEventDD: NSObject
    @objc public var browserSdkVersion: String?
    @objc public var configuration: DDRUMVitalEventDDConfiguration?
    @objc public var formatVersion: NSNumber
    @objc public var session: DDRUMVitalEventDDSession?
    @objc public var vital: DDRUMVitalEventDDVital?
public class DDRUMVitalEventDDConfiguration: NSObject
    @objc public var sessionReplaySampleRate: NSNumber?
    @objc public var sessionSampleRate: NSNumber
public class DDRUMVitalEventDDSession: NSObject
    @objc public var plan: DDRUMVitalEventDDSessionPlan
    @objc public var sessionPrecondition: DDRUMVitalEventDDSessionRUMSessionPrecondition
public enum DDRUMVitalEventDDSessionPlan: Int
    case none
    case plan1
    case plan2
public enum DDRUMVitalEventDDSessionRUMSessionPrecondition: Int
    case none
    case userAppLaunch
    case inactivityTimeout
    case maxDuration
    case backgroundLaunch
    case prewarm
    case fromNonInteractiveSession
    case explicitStop
public class DDRUMVitalEventDDVital: NSObject
    @objc public var computedValue: NSNumber?
public class DDRUMVitalEventApplication: NSObject
    @objc public var id: String
public class DDRUMVitalEventRUMCITest: NSObject
    @objc public var testExecutionId: String
public class DDRUMVitalEventRUMConnectivity: NSObject
    @objc public var cellular: DDRUMVitalEventRUMConnectivityCellular?
    @objc public var effectiveType: DDRUMVitalEventRUMConnectivityEffectiveType
    @objc public var interfaces: [Int]?
    @objc public var status: DDRUMVitalEventRUMConnectivityStatus
public class DDRUMVitalEventRUMConnectivityCellular: NSObject
    @objc public var carrierName: String?
    @objc public var technology: String?
public enum DDRUMVitalEventRUMConnectivityEffectiveType: Int
    case none
    case slow2g
    case effectiveType2g
    case effectiveType3g
    case effectiveType4g
public enum DDRUMVitalEventRUMConnectivityInterfaces: Int
    case none
    case bluetooth
    case cellular
    case ethernet
    case wifi
    case wimax
    case mixed
    case other
    case unknown
    case interfacesNone
public enum DDRUMVitalEventRUMConnectivityStatus: Int
    case connected
    case notConnected
    case maybe
public class DDRUMVitalEventContainer: NSObject
    @objc public var source: DDRUMVitalEventContainerSource
    @objc public var view: DDRUMVitalEventContainerView
public enum DDRUMVitalEventContainerSource: Int
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    case kotlinMultiplatform
public class DDRUMVitalEventContainerView: NSObject
    @objc public var id: String
public class DDRUMVitalEventRUMEventAttributes: NSObject
    @objc public var contextInfo: [String: Any]
public class DDRUMVitalEventRUMDevice: NSObject
    @objc public var architecture: String?
    @objc public var brand: String?
    @objc public var model: String?
    @objc public var name: String?
    @objc public var type: DDRUMVitalEventRUMDeviceRUMDeviceType
public enum DDRUMVitalEventRUMDeviceRUMDeviceType: Int
    case mobile
    case desktop
    case tablet
    case tv
    case gamingConsole
    case bot
    case other
public class DDRUMVitalEventDisplay: NSObject
    @objc public var viewport: DDRUMVitalEventDisplayViewport?
public class DDRUMVitalEventDisplayViewport: NSObject
    @objc public var height: NSNumber
    @objc public var width: NSNumber
public class DDRUMVitalEventRUMOperatingSystem: NSObject
    @objc public var build: String?
    @objc public var name: String
    @objc public var version: String
    @objc public var versionMajor: String
public class DDRUMVitalEventSession: NSObject
    @objc public var hasReplay: NSNumber?
    @objc public var id: String
    @objc public var type: DDRUMVitalEventSessionRUMSessionType
public enum DDRUMVitalEventSessionRUMSessionType: Int
    case user
    case synthetics
    case ciTest
public enum DDRUMVitalEventSource: Int
    case none
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    case kotlinMultiplatform
public class DDRUMVitalEventRUMSyntheticsTest: NSObject
    @objc public var injected: NSNumber?
    @objc public var resultId: String
    @objc public var testId: String
public class DDRUMVitalEventRUMUser: NSObject
    @objc public var anonymousId: String?
    @objc public var email: String?
    @objc public var id: String?
    @objc public var name: String?
    @objc public var usrInfo: [String: Any]
public class DDRUMVitalEventView: NSObject
    @objc public var id: String
    @objc public var name: String?
    @objc public var referrer: String?
    @objc public var url: String
public class DDRUMVitalEventVital: NSObject
    @objc public var custom: [String: NSNumber]?
    @objc public var details: String?
    @objc public var duration: NSNumber?
    @objc public var id: String
    @objc public var name: String?
    @objc public var type: DDRUMVitalEventVitalVitalType
public enum DDRUMVitalEventVitalVitalType: Int
    case duration
public class DDTelemetryErrorEvent: NSObject
    @objc public var dd: DDTelemetryErrorEventDD
    @objc public var action: DDTelemetryErrorEventAction?
    @objc public var application: DDTelemetryErrorEventApplication?
    @objc public var date: NSNumber
    @objc public var effectiveSampleRate: NSNumber?
    @objc public var experimentalFeatures: [String]?
    @objc public var service: String
    @objc public var session: DDTelemetryErrorEventSession?
    @objc public var source: DDTelemetryErrorEventSource
    @objc public var telemetry: DDTelemetryErrorEventTelemetry
    @objc public var type: String
    @objc public var version: String
    @objc public var view: DDTelemetryErrorEventView?
public class DDTelemetryErrorEventDD: NSObject
    @objc public var formatVersion: NSNumber
public class DDTelemetryErrorEventAction: NSObject
    @objc public var id: String
public class DDTelemetryErrorEventApplication: NSObject
    @objc public var id: String
public class DDTelemetryErrorEventSession: NSObject
    @objc public var id: String
public enum DDTelemetryErrorEventSource: Int
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case unity
    case kotlinMultiplatform
public class DDTelemetryErrorEventTelemetry: NSObject
    @objc public var device: DDTelemetryErrorEventTelemetryRUMTelemetryDevice?
    @objc public var error: DDTelemetryErrorEventTelemetryError?
    @objc public var message: String
    @objc public var os: DDTelemetryErrorEventTelemetryRUMTelemetryOperatingSystem?
    @objc public var status: String
    @objc public var type: String?
    @objc public var telemetryInfo: [String: Any]
public class DDTelemetryErrorEventTelemetryRUMTelemetryDevice: NSObject
    @objc public var architecture: String?
    @objc public var brand: String?
    @objc public var model: String?
public class DDTelemetryErrorEventTelemetryError: NSObject
    @objc public var kind: String?
    @objc public var stack: String?
public class DDTelemetryErrorEventTelemetryRUMTelemetryOperatingSystem: NSObject
    @objc public var build: String?
    @objc public var name: String?
    @objc public var version: String?
public class DDTelemetryErrorEventView: NSObject
    @objc public var id: String
public class DDTelemetryDebugEvent: NSObject
    @objc public var dd: DDTelemetryDebugEventDD
    @objc public var action: DDTelemetryDebugEventAction?
    @objc public var application: DDTelemetryDebugEventApplication?
    @objc public var date: NSNumber
    @objc public var effectiveSampleRate: NSNumber?
    @objc public var experimentalFeatures: [String]?
    @objc public var service: String
    @objc public var session: DDTelemetryDebugEventSession?
    @objc public var source: DDTelemetryDebugEventSource
    @objc public var telemetry: DDTelemetryDebugEventTelemetry
    @objc public var type: String
    @objc public var version: String
    @objc public var view: DDTelemetryDebugEventView?
public class DDTelemetryDebugEventDD: NSObject
    @objc public var formatVersion: NSNumber
public class DDTelemetryDebugEventAction: NSObject
    @objc public var id: String
public class DDTelemetryDebugEventApplication: NSObject
    @objc public var id: String
public class DDTelemetryDebugEventSession: NSObject
    @objc public var id: String
public enum DDTelemetryDebugEventSource: Int
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case unity
    case kotlinMultiplatform
public class DDTelemetryDebugEventTelemetry: NSObject
    @objc public var device: DDTelemetryDebugEventTelemetryRUMTelemetryDevice?
    @objc public var message: String
    @objc public var os: DDTelemetryDebugEventTelemetryRUMTelemetryOperatingSystem?
    @objc public var status: String
    @objc public var type: String?
    @objc public var telemetryInfo: [String: Any]
public class DDTelemetryDebugEventTelemetryRUMTelemetryDevice: NSObject
    @objc public var architecture: String?
    @objc public var brand: String?
    @objc public var model: String?
public class DDTelemetryDebugEventTelemetryRUMTelemetryOperatingSystem: NSObject
    @objc public var build: String?
    @objc public var name: String?
    @objc public var version: String?
public class DDTelemetryDebugEventView: NSObject
    @objc public var id: String
public class DDTelemetryConfigurationEvent: NSObject
    @objc public var dd: DDTelemetryConfigurationEventDD
    @objc public var action: DDTelemetryConfigurationEventAction?
    @objc public var application: DDTelemetryConfigurationEventApplication?
    @objc public var date: NSNumber
    @objc public var effectiveSampleRate: NSNumber?
    @objc public var experimentalFeatures: [String]?
    @objc public var service: String
    @objc public var session: DDTelemetryConfigurationEventSession?
    @objc public var source: DDTelemetryConfigurationEventSource
    @objc public var telemetry: DDTelemetryConfigurationEventTelemetry
    @objc public var type: String
    @objc public var version: String
    @objc public var view: DDTelemetryConfigurationEventView?
public class DDTelemetryConfigurationEventDD: NSObject
    @objc public var formatVersion: NSNumber
public class DDTelemetryConfigurationEventAction: NSObject
    @objc public var id: String
public class DDTelemetryConfigurationEventApplication: NSObject
    @objc public var id: String
public class DDTelemetryConfigurationEventSession: NSObject
    @objc public var id: String
public enum DDTelemetryConfigurationEventSource: Int
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case unity
    case kotlinMultiplatform
public class DDTelemetryConfigurationEventTelemetry: NSObject
    @objc public var configuration: DDTelemetryConfigurationEventTelemetryConfiguration
    @objc public var device: DDTelemetryConfigurationEventTelemetryRUMTelemetryDevice?
    @objc public var os: DDTelemetryConfigurationEventTelemetryRUMTelemetryOperatingSystem?
    @objc public var type: String
    @objc public var telemetryInfo: [String: Any]
public class DDTelemetryConfigurationEventTelemetryConfiguration: NSObject
    @objc public var actionNameAttribute: String?
    @objc public var allowFallbackToLocalStorage: NSNumber?
    @objc public var allowUntrustedEvents: NSNumber?
    @objc public var appHangThreshold: NSNumber?
    @objc public var backgroundTasksEnabled: NSNumber?
    @objc public var batchProcessingLevel: NSNumber?
    @objc public var batchSize: NSNumber?
    @objc public var batchUploadFrequency: NSNumber?
    @objc public var collectFeatureFlagsOn: [Int]?
    @objc public var compressIntakeRequests: NSNumber?
    @objc public var dartVersion: String?
    @objc public var defaultPrivacyLevel: String?
    @objc public var enablePrivacyForActionName: NSNumber?
    @objc public var forwardConsoleLogs: DDTelemetryConfigurationEventTelemetryConfigurationForwardConsoleLogs?
    @objc public var forwardErrorsToLogs: NSNumber?
    @objc public var forwardReports: DDTelemetryConfigurationEventTelemetryConfigurationForwardReports?
    @objc public var imagePrivacyLevel: String?
    @objc public var initializationType: String?
    @objc public var isMainProcess: NSNumber?
    @objc public var mobileVitalsUpdatePeriod: NSNumber?
    @objc public var plugins: [DDTelemetryConfigurationEventTelemetryConfigurationPlugins]?
    @objc public var premiumSampleRate: NSNumber?
    @objc public var reactNativeVersion: String?
    @objc public var reactVersion: String?
    @objc public var replaySampleRate: NSNumber?
    @objc public var selectedTracingPropagators: [Int]?
    @objc public var sendLogsAfterSessionExpiration: NSNumber?
    @objc public var sessionReplaySampleRate: NSNumber?
    @objc public var sessionSampleRate: NSNumber?
    @objc public var silentMultipleInit: NSNumber?
    @objc public var startRecordingImmediately: NSNumber?
    @objc public var startSessionReplayRecordingManually: NSNumber?
    @objc public var storeContextsAcrossPages: NSNumber?
    @objc public var telemetryConfigurationSampleRate: NSNumber?
    @objc public var telemetrySampleRate: NSNumber?
    @objc public var telemetryUsageSampleRate: NSNumber?
    @objc public var textAndInputPrivacyLevel: String?
    @objc public var touchPrivacyLevel: String?
    @objc public var traceContextInjection: DDTelemetryConfigurationEventTelemetryConfigurationTraceContextInjection
    @objc public var traceSampleRate: NSNumber?
    @objc public var tracerApi: String?
    @objc public var tracerApiVersion: String?
    @objc public var trackBackgroundEvents: NSNumber?
    @objc public var trackCrossPlatformLongTasks: NSNumber?
    @objc public var trackErrors: NSNumber?
    @objc public var trackFlutterPerformance: NSNumber?
    @objc public var trackFrustrations: NSNumber?
    @objc public var trackInteractions: NSNumber?
    @objc public var trackLongTask: NSNumber?
    @objc public var trackNativeErrors: NSNumber?
    @objc public var trackNativeLongTasks: NSNumber?
    @objc public var trackNativeViews: NSNumber?
    @objc public var trackNetworkRequests: NSNumber?
    @objc public var trackResources: NSNumber?
    @objc public var trackSessionAcrossSubdomains: NSNumber?
    @objc public var trackUserInteractions: NSNumber?
    @objc public var trackViewsManually: NSNumber?
    @objc public var trackingConsent: DDTelemetryConfigurationEventTelemetryConfigurationTrackingConsent
    @objc public var unityVersion: String?
    @objc public var useAllowedTracingOrigins: NSNumber?
    @objc public var useAllowedTracingUrls: NSNumber?
    @objc public var useBeforeSend: NSNumber?
    @objc public var useCrossSiteSessionCookie: NSNumber?
    @objc public var useExcludedActivityUrls: NSNumber?
    @objc public var useFirstPartyHosts: NSNumber?
    @objc public var useLocalEncryption: NSNumber?
    @objc public var usePartitionedCrossSiteSessionCookie: NSNumber?
    @objc public var usePciIntake: NSNumber?
    @objc public var useProxy: NSNumber?
    @objc public var useSecureSessionCookie: NSNumber?
    @objc public var useTracing: NSNumber?
    @objc public var useWorkerUrl: NSNumber?
    @objc public var viewTrackingStrategy: DDTelemetryConfigurationEventTelemetryConfigurationViewTrackingStrategy
public enum DDTelemetryConfigurationEventTelemetryConfigurationCollectFeatureFlagsOn: Int
    case none
    case view
    case error
    case vital
public class DDTelemetryConfigurationEventTelemetryConfigurationForwardConsoleLogs: NSObject
    @objc public var stringsArray: [String]?
    @objc public var string: String?
public class DDTelemetryConfigurationEventTelemetryConfigurationForwardReports: NSObject
    @objc public var stringsArray: [String]?
    @objc public var string: String?
public class DDTelemetryConfigurationEventTelemetryConfigurationPlugins: NSObject
    @objc public var name: String
    @objc public var pluginsInfo: [String: Any]
public enum DDTelemetryConfigurationEventTelemetryConfigurationSelectedTracingPropagators: Int
    case none
    case datadog
    case b3
    case b3multi
    case tracecontext
public enum DDTelemetryConfigurationEventTelemetryConfigurationTraceContextInjection: Int
    case none
    case all
    case sampled
public enum DDTelemetryConfigurationEventTelemetryConfigurationTrackingConsent: Int
    case none
    case granted
    case notGranted
    case pending
public enum DDTelemetryConfigurationEventTelemetryConfigurationViewTrackingStrategy: Int
    case none
    case activityViewTrackingStrategy
    case fragmentViewTrackingStrategy
    case mixedViewTrackingStrategy
    case navigationViewTrackingStrategy
public class DDTelemetryConfigurationEventTelemetryRUMTelemetryDevice: NSObject
    @objc public var architecture: String?
    @objc public var brand: String?
    @objc public var model: String?
public class DDTelemetryConfigurationEventTelemetryRUMTelemetryOperatingSystem: NSObject
    @objc public var build: String?
    @objc public var name: String?
    @objc public var version: String?
public class DDTelemetryConfigurationEventView: NSObject
    @objc public var id: String
public final class DDSessionReplay: NSObject
    public static func enable(with configuration: DDSessionReplayConfiguration)
public final class DDSessionReplayConfiguration: NSObject
    @objc public var replaySampleRate: Float
    @objc public var defaultPrivacyLevel: DDSessionReplayConfigurationPrivacyLevel
    @objc public var customEndpoint: URL?
    public required init(replaySampleRate: Float)
public enum DDSessionReplayConfigurationPrivacyLevel: Int
    case allow
    case mask
    case maskUserInput
public enum DDInjectEncoding: Int
    case multiple = 0
    case single = 1
public class DDOTelHTTPHeadersWriter: DDB3HTTPHeadersWriter
public class DDB3HTTPHeadersWriter: NSObject
    @objc public var traceHeaderFields: [String: String]
    public convenience init(samplingRate: Float,injectEncoding: DDInjectEncoding = .single)
    public init(sampleRate: Float = 20,injectEncoding: DDInjectEncoding = .single)
    public init(samplingStrategy: DDTraceSamplingStrategy,injectEncoding: DDInjectEncoding = .single,traceContextInjection: DDTraceContextInjection = .all)
public class DDHTTPHeadersWriter: NSObject
    @objc public var traceHeaderFields: [String: String]
    public convenience init(samplingRate: Float)
    public init(sampleRate: Float = 20)
    public init(samplingStrategy: DDTraceSamplingStrategy,traceContextInjection: DDTraceContextInjection)
public enum DDTraceContextInjection: Int
    case all
    case sampled
public class DDTraceSamplingStrategy: NSObject
    public static func headBased() -> DDTraceSamplingStrategy
    public static func custom(sampleRate: Float) -> DDTraceSamplingStrategy
public class DDW3CHTTPHeadersWriter: NSObject
    @objc public var traceHeaderFields: [String: String]
    public convenience init(samplingRate: Float)
    public init(sampleRate: Float = 20)
    public init(samplingStrategy: DDTraceSamplingStrategy,traceContextInjection: DDTraceContextInjection)
public class DDTraceConfiguration: NSObject
    override public init()
    @objc public var sampleRate: Float
    @objc public var service: String?
    @objc public var tags: [String: Any]?
    public func setURLSessionTracking(_ tracking: DDTraceURLSessionTracking)
    @objc public var bundleWithRumEnabled: Bool
    @objc public var networkInfoEnabled: Bool
    @objc public var customEndpoint: URL?
public class DDTraceFirstPartyHostsTracing: NSObject
    public init(hostsWithHeaderTypes: [String: Set<DDTracingHeaderType>])
    public init(hostsWithHeaderTypes: [String: Set<DDTracingHeaderType>], sampleRate: Float)
    public init(hosts: Set<String>)
    public init(hosts: Set<String>, sampleRate: Float)
public class DDTraceURLSessionTracking: NSObject
    public init(firstPartyHostsTracing: DDTraceFirstPartyHostsTracing)
    public func setFirstPartyHostsTracing(_ firstPartyHostsTracing: DDTraceFirstPartyHostsTracing)
public class DDTrace: NSObject
    public static func enable(with configuration: DDTraceConfiguration)
public class DDTracer: NSObject, DatadogObjc.OTTracer
    public static func shared() -> DatadogObjc.OTTracer
    public func startSpan(_ operationName: String) -> OTSpan
    public func startSpan(_ operationName: String, tags: NSDictionary?) -> OTSpan
    public func startSpan(_ operationName: String, childOf parent: OTSpanContext?) -> OTSpan
    public func startSpan(_ operationName: String,childOf parent: OTSpanContext?,tags: NSDictionary?) -> OTSpan
    public func startSpan(_ operationName: String,childOf parent: OTSpanContext?,tags: NSDictionary?,startTime: Date?) -> OTSpan
    public func inject(_ spanContext: OTSpanContext, format: String, carrier: Any) throws
    public func extractWithFormat(_ format: String, carrier: Any) throws
