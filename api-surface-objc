 public var ddURLSessionDelegate: DDURLSessionDelegate
 override public init()
 public init(additionalFirstPartyHosts: Set<String>)
public class DDTrackingConsent: NSObject
 public static func granted() -> DDTrackingConsent
 public static func notGranted() -> DDTrackingConsent
 public static func pending() -> DDTrackingConsent
public class DDAppContext: NSObject
 public init(mainBundle: Bundle)
 override public init()
public class DDDatadog: NSObject
 public static func initialize(appContext: DDAppContext, configuration: DDConfiguration)
 public static func initialize(appContext: DDAppContext,trackingConsent: DDTrackingConsent,configuration: DDConfiguration)
 public static func setVerbosityLevel(_ verbosityLevel: DDSDKVerbosityLevel)
 public static func verbosityLevel() -> DDSDKVerbosityLevel
 public static func setUserInfo(id: String? = nil, name: String? = nil, email: String? = nil, extraInfo: [String: Any] = [:])
 public static func setTrackingConsent(consent: DDTrackingConsent)
 public static func flushAndDeinitialize()
public class DDEndpoint: NSObject
 public static func us1() -> DDEndpoint
 public static func us3() -> DDEndpoint
 public static func us5() -> DDEndpoint
 public static func eu1() -> DDEndpoint
 public static func us1_fed() -> DDEndpoint
 public static func eu() -> DDEndpoint
 public static func us() -> DDEndpoint
 public static func gov() -> DDEndpoint
public class DDLogsEndpoint: NSObject
 public static func us1() -> DDLogsEndpoint
 public static func us3() -> DDLogsEndpoint
 public static func eu1() -> DDLogsEndpoint
 public static func us1_fed() -> DDLogsEndpoint
 public static func eu() -> DDLogsEndpoint
 public static func us() -> DDLogsEndpoint
 public static func gov() -> DDLogsEndpoint
 public static func custom(url: String) -> DDLogsEndpoint
public class DDTracesEndpoint: NSObject
 public static func us1() -> DDTracesEndpoint
 public static func us3() -> DDTracesEndpoint
 public static func eu1() -> DDTracesEndpoint
 public static func us1_fed() -> DDTracesEndpoint
 public static func eu() -> DDTracesEndpoint
 public static func us() -> DDTracesEndpoint
 public static func gov() -> DDTracesEndpoint
 public static func custom(url: String) -> DDTracesEndpoint
public enum DDBatchSize: Int
 case small
 case medium
 case large
public enum DDUploadFrequency: Int
 case frequent
 case average
 case rare
public class DDConfiguration: NSObject
 public static func builder(clientToken: String, environment: String) -> DDConfigurationBuilder
 public static func builder(rumApplicationID: String, clientToken: String, environment: String) -> DDConfigurationBuilder
public class DDConfigurationBuilder: NSObject
 public func enableLogging(_ enabled: Bool)
 public func enableTracing(_ enabled: Bool)
 public func enableRUM(_ enabled: Bool)
 public func enableCrashReporting(using crashReportingPlugin: DDCrashReportingPluginType)
 public func set(endpoint: DDEndpoint)
 public func set(customLogsEndpoint: URL)
 public func set(customTracesEndpoint: URL)
 public func set(customRUMEndpoint: URL)
 public func set(logsEndpoint: DDLogsEndpoint)
 public func set(tracesEndpoint: DDTracesEndpoint)
 public func set(tracedHosts: Set<String>)
 public func track(firstPartyHosts: Set<String>)
 public func trackURLSession(firstPartyHosts: Set<String>)
 public func set(serviceName: String)
 public func set(rumSessionsSamplingRate: Float)
 public func set(onRUMSessionStart handler: @escaping (String, Bool) -> Void)
 public func trackUIKitRUMViews()
 public func trackUIKitRUMViews(using predicate: DDUIKitRUMViewsPredicate)
 public func trackUIKitActions()
 public func trackUIKitRUMActions()
 public func trackUIKitRUMActions(using predicate: DDUIKitRUMUserActionsPredicate)
 public func trackRUMLongTasks()
 public func trackRUMLongTasks(threshold: TimeInterval)
 public func setRUMViewEventMapper(_ mapper: @escaping (DDRUMViewEvent) -> DDRUMViewEvent)
 public func setRUMResourceEventMapper(_ mapper: @escaping (DDRUMResourceEvent) -> DDRUMResourceEvent?)
 public func setRUMActionEventMapper(_ mapper: @escaping (DDRUMActionEvent) -> DDRUMActionEvent?)
 public func setRUMErrorEventMapper(_ mapper: @escaping (DDRUMErrorEvent) -> DDRUMErrorEvent?)
 public func setRUMLongTaskEventMapper(_ mapper: @escaping (DDRUMLongTaskEvent) -> DDRUMLongTaskEvent?)
 public func set(batchSize: DDBatchSize)
 public func set(uploadFrequency: DDUploadFrequency)
 public func set(additionalConfiguration: [String: Any])
 public func set(proxyConfiguration: [AnyHashable: Any])
 public func build() -> DDConfiguration
public class DDGlobal: NSObject
 @objc public static var sharedTracer = DatadogObjc.DDTracer(swiftTracer: Datadog.Global.sharedTracer)
 @objc public static var rum = DatadogObjc.DDRUMMonitor(swiftRUMMonitor: Datadog.Global.rum)
public enum DDSDKVerbosityLevel: Int
 case none
 case debug
 case info
 case notice
 case warn
 case error
 case critical
public class DDLogger: NSObject
 public func debug(_ message: String)
 public func debug(_ message: String, attributes: [String: Any])
 public func debug(_ message: String, error: NSError, attributes: [String: Any])
 public func info(_ message: String)
 public func info(_ message: String, attributes: [String: Any])
 public func info(_ message: String, error: NSError, attributes: [String: Any])
 public func notice(_ message: String)
 public func notice(_ message: String, attributes: [String: Any])
 public func notice(_ message: String, error: NSError, attributes: [String: Any])
 public func warn(_ message: String)
 public func warn(_ message: String, attributes: [String: Any])
 public func warn(_ message: String, error: NSError, attributes: [String: Any])
 public func error(_ message: String)
 public func error(_ message: String, attributes: [String: Any])
 public func error(_ message: String, error: NSError, attributes: [String: Any])
 public func critical(_ message: String)
 public func critical(_ message: String, attributes: [String: Any])
 public func critical(_ message: String, error: NSError, attributes: [String: Any])
 public func addAttribute(forKey key: String, value: Any)
 public func removeAttribute(forKey key: String)
 public func addTag(withKey key: String, value: String)
 public func removeTag(withKey key: String)
 public func add(tag: String)
 public func remove(tag: String)
 public static func builder() -> DDLoggerBuilder
public class DDLoggerBuilder: NSObject
 public func set(serviceName: String)
 public func set(loggerName: String)
 public func sendNetworkInfo(_ enabled: Bool)
 public func sendLogsToDatadog(_ enabled: Bool)
 public func printLogsToConsole(_ enabled: Bool)
 public func build() -> DDLogger
@objc public protocol OTSpan
 var context: OTSpanContext
 var tracer: OTTracer
 func setOperationName(_ operationName: String)
 func setTag(_ key: String, value: NSString)
 func setTag(_ key: String, numberValue: NSNumber)
 func setTag(_ key: String, boolValue: Bool)
 func log(_ fields: [String: NSObject])
 func log(_ fields: [String: NSObject], timestamp: Date?)
 func setBaggageItem(_ key: String, value: String) -> OTSpan
 func getBaggageItem(_ key: String) -> String?
 func setError(_ error: Error)
 func setError(kind: String, message: String, stack: String?)
 func finish()
 func finishWithTime(_ finishTime: Date?)
 func setActive() -> OTSpan
@objc public protocol OTSpanContext
 func forEachBaggageItem(_ callback: (_ key: String, _ value: String) -> Bool)
public class OT: NSObject
 @objc public static let formatTextMap = "OTFormatTextMap"
@objc public protocol OTTracer
 func startSpan(_ operationName: String) -> OTSpan
 func startSpan(_ operationName: String, tags: NSDictionary?) -> OTSpan
 func startSpan(_ operationName: String, childOf parent: OTSpanContext?) -> OTSpan
 func startSpan(_ operationName: String, childOf parent: OTSpanContext?, tags: NSDictionary?) -> OTSpan
 func startSpan(_ operationName: String, childOf parent: OTSpanContext?, tags: NSDictionary?, startTime: Date?) -> OTSpan
 func inject(_ spanContext: OTSpanContext, format: String, carrier: Any) throws
 func extractWithFormat(_ format: String, carrier: Any) throws
public class DDRUMViewEvent: NSObject
 @objc public var dd: DDRUMViewEventDD
 @objc public var application: DDRUMViewEventApplication
 @objc public var connectivity: DDRUMViewEventRUMConnectivity?
 @objc public var context: DDRUMViewEventRUMEventAttributes?
 @objc public var date: NSNumber
 @objc public var service: String?
 @objc public var session: DDRUMViewEventSession
 @objc public var synthetics: DDRUMViewEventSynthetics?
 @objc public var type: String
 @objc public var usr: DDRUMViewEventRUMUser?
 @objc public var view: DDRUMViewEventView
public class DDRUMViewEventDD: NSObject
 @objc public var documentVersion: NSNumber
 @objc public var formatVersion: NSNumber
 @objc public var session: DDRUMViewEventDDSession?
public class DDRUMViewEventDDSession: NSObject
 @objc public var plan: DDRUMViewEventDDSessionPlan
public enum DDRUMViewEventDDSessionPlan: Int
 case plan1
 case plan2
public class DDRUMViewEventApplication: NSObject
 @objc public var id: String
public class DDRUMViewEventRUMConnectivity: NSObject
 @objc public var cellular: DDRUMViewEventRUMConnectivityCellular?
 @objc public var interfaces: [Int]
 @objc public var status: DDRUMViewEventRUMConnectivityStatus
public class DDRUMViewEventRUMConnectivityCellular: NSObject
 @objc public var carrierName: String?
 @objc public var technology: String?
public enum DDRUMViewEventRUMConnectivityInterfaces: Int
 case bluetooth
 case cellular
 case ethernet
 case wifi
 case wimax
 case mixed
 case other
 case unknown
 case none
public enum DDRUMViewEventRUMConnectivityStatus: Int
 case connected
 case notConnected
 case maybe
public class DDRUMViewEventRUMEventAttributes: NSObject
 @objc public var contextInfo: [String: Any]
public class DDRUMViewEventSession: NSObject
 @objc public var hasReplay: NSNumber?
 @objc public var id: String
 @objc public var type: DDRUMViewEventSessionSessionType
public enum DDRUMViewEventSessionSessionType: Int
 case user
 case synthetics
public class DDRUMViewEventSynthetics: NSObject
 @objc public var resultId: String
 @objc public var testId: String
public class DDRUMViewEventRUMUser: NSObject
 @objc public var email: String?
 @objc public var id: String?
 @objc public var name: String?
 @objc public var usrInfo: [String: Any]
public class DDRUMViewEventView: NSObject
 @objc public var action: DDRUMViewEventViewAction
 @objc public var cpuTicksCount: NSNumber?
 @objc public var cpuTicksPerSecond: NSNumber?
 @objc public var crash: DDRUMViewEventViewCrash?
 @objc public var cumulativeLayoutShift: NSNumber?
 @objc public var customTimings: [String: NSNumber]?
 @objc public var domComplete: NSNumber?
 @objc public var domContentLoaded: NSNumber?
 @objc public var domInteractive: NSNumber?
 @objc public var error: DDRUMViewEventViewError
 @objc public var firstContentfulPaint: NSNumber?
 @objc public var firstInputDelay: NSNumber?
 @objc public var firstInputTime: NSNumber?
 @objc public var frozenFrame: DDRUMViewEventViewFrozenFrame?
 @objc public var id: String
 @objc public var inForegroundPeriods: [DDRUMViewEventViewInForegroundPeriods]?
 @objc public var isActive: NSNumber?
 @objc public var isSlowRendered: NSNumber?
 @objc public var largestContentfulPaint: NSNumber?
 @objc public var loadEvent: NSNumber?
 @objc public var loadingTime: NSNumber?
 @objc public var loadingType: DDRUMViewEventViewLoadingType
 @objc public var longTask: DDRUMViewEventViewLongTask?
 @objc public var memoryAverage: NSNumber?
 @objc public var memoryMax: NSNumber?
 @objc public var name: String?
 @objc public var referrer: String?
 @objc public var refreshRateAverage: NSNumber?
 @objc public var refreshRateMin: NSNumber?
 @objc public var resource: DDRUMViewEventViewResource
 @objc public var timeSpent: NSNumber
 @objc public var url: String
public class DDRUMViewEventViewAction: NSObject
 @objc public var count: NSNumber
public class DDRUMViewEventViewCrash: NSObject
 @objc public var count: NSNumber
public class DDRUMViewEventViewError: NSObject
 @objc public var count: NSNumber
public class DDRUMViewEventViewFrozenFrame: NSObject
 @objc public var count: NSNumber
public class DDRUMViewEventViewInForegroundPeriods: NSObject
 @objc public var duration: NSNumber
 @objc public var start: NSNumber
public enum DDRUMViewEventViewLoadingType: Int
 case none
 case initialLoad
 case routeChange
 case activityDisplay
 case activityRedisplay
 case fragmentDisplay
 case fragmentRedisplay
 case viewControllerDisplay
 case viewControllerRedisplay
public class DDRUMViewEventViewLongTask: NSObject
 @objc public var count: NSNumber
public class DDRUMViewEventViewResource: NSObject
 @objc public var count: NSNumber
public class DDRUMResourceEvent: NSObject
 @objc public var dd: DDRUMResourceEventDD
 @objc public var action: DDRUMResourceEventAction?
 @objc public var application: DDRUMResourceEventApplication
 @objc public var connectivity: DDRUMResourceEventRUMConnectivity?
 @objc public var context: DDRUMResourceEventRUMEventAttributes?
 @objc public var date: NSNumber
 @objc public var resource: DDRUMResourceEventResource
 @objc public var service: String?
 @objc public var session: DDRUMResourceEventSession
 @objc public var synthetics: DDRUMResourceEventSynthetics?
 @objc public var type: String
 @objc public var usr: DDRUMResourceEventRUMUser?
 @objc public var view: DDRUMResourceEventView
public class DDRUMResourceEventDD: NSObject
 @objc public var formatVersion: NSNumber
 @objc public var session: DDRUMResourceEventDDSession?
 @objc public var spanId: String?
 @objc public var traceId: String?
public class DDRUMResourceEventDDSession: NSObject
 @objc public var plan: DDRUMResourceEventDDSessionPlan
public enum DDRUMResourceEventDDSessionPlan: Int
 case plan1
 case plan2
public class DDRUMResourceEventAction: NSObject
 @objc public var id: String
public class DDRUMResourceEventApplication: NSObject
 @objc public var id: String
public class DDRUMResourceEventRUMConnectivity: NSObject
 @objc public var cellular: DDRUMResourceEventRUMConnectivityCellular?
 @objc public var interfaces: [Int]
 @objc public var status: DDRUMResourceEventRUMConnectivityStatus
public class DDRUMResourceEventRUMConnectivityCellular: NSObject
 @objc public var carrierName: String?
 @objc public var technology: String?
public enum DDRUMResourceEventRUMConnectivityInterfaces: Int
 case bluetooth
 case cellular
 case ethernet
 case wifi
 case wimax
 case mixed
 case other
 case unknown
 case none
public enum DDRUMResourceEventRUMConnectivityStatus: Int
 case connected
 case notConnected
 case maybe
public class DDRUMResourceEventRUMEventAttributes: NSObject
 @objc public var contextInfo: [String: Any]
public class DDRUMResourceEventResource: NSObject
 @objc public var connect: DDRUMResourceEventResourceConnect?
 @objc public var dns: DDRUMResourceEventResourceDNS?
 @objc public var download: DDRUMResourceEventResourceDownload?
 @objc public var duration: NSNumber
 @objc public var firstByte: DDRUMResourceEventResourceFirstByte?
 @objc public var id: String?
 @objc public var method: DDRUMResourceEventResourceRUMMethod
 @objc public var provider: DDRUMResourceEventResourceProvider?
 @objc public var redirect: DDRUMResourceEventResourceRedirect?
 @objc public var size: NSNumber?
 @objc public var ssl: DDRUMResourceEventResourceSSL?
 @objc public var statusCode: NSNumber?
 @objc public var type: DDRUMResourceEventResourceResourceType
 @objc public var url: String
public class DDRUMResourceEventResourceConnect: NSObject
 @objc public var duration: NSNumber
 @objc public var start: NSNumber
public class DDRUMResourceEventResourceDNS: NSObject
 @objc public var duration: NSNumber
 @objc public var start: NSNumber
public class DDRUMResourceEventResourceDownload: NSObject
 @objc public var duration: NSNumber
 @objc public var start: NSNumber
public class DDRUMResourceEventResourceFirstByte: NSObject
 @objc public var duration: NSNumber
 @objc public var start: NSNumber
public enum DDRUMResourceEventResourceRUMMethod: Int
 case none
 case post
 case get
 case head
 case put
 case delete
 case patch
public class DDRUMResourceEventResourceProvider: NSObject
 @objc public var domain: String?
 @objc public var name: String?
 @objc public var type: DDRUMResourceEventResourceProviderProviderType
public enum DDRUMResourceEventResourceProviderProviderType: Int
 case none
 case ad
 case advertising
 case analytics
 case cdn
 case content
 case customerSuccess
 case firstParty
 case hosting
 case marketing
 case other
 case social
 case tagManager
 case utility
 case video
public class DDRUMResourceEventResourceRedirect: NSObject
 @objc public var duration: NSNumber
 @objc public var start: NSNumber
public class DDRUMResourceEventResourceSSL: NSObject
 @objc public var duration: NSNumber
 @objc public var start: NSNumber
public enum DDRUMResourceEventResourceResourceType: Int
 case document
 case xhr
 case beacon
 case fetch
 case css
 case js
 case image
 case font
 case media
 case other
 case native
public class DDRUMResourceEventSession: NSObject
 @objc public var hasReplay: NSNumber?
 @objc public var id: String
 @objc public var type: DDRUMResourceEventSessionSessionType
public enum DDRUMResourceEventSessionSessionType: Int
 case user
 case synthetics
public class DDRUMResourceEventSynthetics: NSObject
 @objc public var resultId: String
 @objc public var testId: String
public class DDRUMResourceEventRUMUser: NSObject
 @objc public var email: String?
 @objc public var id: String?
 @objc public var name: String?
 @objc public var usrInfo: [String: Any]
public class DDRUMResourceEventView: NSObject
 @objc public var id: String
 @objc public var name: String?
 @objc public var referrer: String?
 @objc public var url: String
public class DDRUMActionEvent: NSObject
 @objc public var dd: DDRUMActionEventDD
 @objc public var action: DDRUMActionEventAction
 @objc public var application: DDRUMActionEventApplication
 @objc public var connectivity: DDRUMActionEventRUMConnectivity?
 @objc public var context: DDRUMActionEventRUMEventAttributes?
 @objc public var date: NSNumber
 @objc public var service: String?
 @objc public var session: DDRUMActionEventSession
 @objc public var synthetics: DDRUMActionEventSynthetics?
 @objc public var type: String
 @objc public var usr: DDRUMActionEventRUMUser?
 @objc public var view: DDRUMActionEventView
public class DDRUMActionEventDD: NSObject
 @objc public var formatVersion: NSNumber
 @objc public var session: DDRUMActionEventDDSession?
public class DDRUMActionEventDDSession: NSObject
 @objc public var plan: DDRUMActionEventDDSessionPlan
public enum DDRUMActionEventDDSessionPlan: Int
 case plan1
 case plan2
public class DDRUMActionEventAction: NSObject
 @objc public var crash: DDRUMActionEventActionCrash?
 @objc public var error: DDRUMActionEventActionError?
 @objc public var id: String?
 @objc public var loadingTime: NSNumber?
 @objc public var longTask: DDRUMActionEventActionLongTask?
 @objc public var resource: DDRUMActionEventActionResource?
 @objc public var target: DDRUMActionEventActionTarget?
 @objc public var type: DDRUMActionEventActionActionType
public class DDRUMActionEventActionCrash: NSObject
 @objc public var count: NSNumber
public class DDRUMActionEventActionError: NSObject
 @objc public var count: NSNumber
public class DDRUMActionEventActionLongTask: NSObject
 @objc public var count: NSNumber
public class DDRUMActionEventActionResource: NSObject
 @objc public var count: NSNumber
public class DDRUMActionEventActionTarget: NSObject
 @objc public var name: String
public enum DDRUMActionEventActionActionType: Int
 case custom
 case click
 case tap
 case scroll
 case swipe
 case applicationStart
 case back
public class DDRUMActionEventApplication: NSObject
 @objc public var id: String
public class DDRUMActionEventRUMConnectivity: NSObject
 @objc public var cellular: DDRUMActionEventRUMConnectivityCellular?
 @objc public var interfaces: [Int]
 @objc public var status: DDRUMActionEventRUMConnectivityStatus
public class DDRUMActionEventRUMConnectivityCellular: NSObject
 @objc public var carrierName: String?
 @objc public var technology: String?
public enum DDRUMActionEventRUMConnectivityInterfaces: Int
 case bluetooth
 case cellular
 case ethernet
 case wifi
 case wimax
 case mixed
 case other
 case unknown
 case none
public enum DDRUMActionEventRUMConnectivityStatus: Int
 case connected
 case notConnected
 case maybe
public class DDRUMActionEventRUMEventAttributes: NSObject
 @objc public var contextInfo: [String: Any]
public class DDRUMActionEventSession: NSObject
 @objc public var hasReplay: NSNumber?
 @objc public var id: String
 @objc public var type: DDRUMActionEventSessionSessionType
public enum DDRUMActionEventSessionSessionType: Int
 case user
 case synthetics
public class DDRUMActionEventSynthetics: NSObject
 @objc public var resultId: String
 @objc public var testId: String
public class DDRUMActionEventRUMUser: NSObject
 @objc public var email: String?
 @objc public var id: String?
 @objc public var name: String?
 @objc public var usrInfo: [String: Any]
public class DDRUMActionEventView: NSObject
 @objc public var id: String
 @objc public var inForeground: NSNumber?
 @objc public var name: String?
 @objc public var referrer: String?
 @objc public var url: String
public class DDRUMErrorEvent: NSObject
 @objc public var dd: DDRUMErrorEventDD
 @objc public var action: DDRUMErrorEventAction?
 @objc public var application: DDRUMErrorEventApplication
 @objc public var connectivity: DDRUMErrorEventRUMConnectivity?
 @objc public var context: DDRUMErrorEventRUMEventAttributes?
 @objc public var date: NSNumber
 @objc public var error: DDRUMErrorEventError
 @objc public var service: String?
 @objc public var session: DDRUMErrorEventSession
 @objc public var synthetics: DDRUMErrorEventSynthetics?
 @objc public var type: String
 @objc public var usr: DDRUMErrorEventRUMUser?
 @objc public var view: DDRUMErrorEventView
public class DDRUMErrorEventDD: NSObject
 @objc public var formatVersion: NSNumber
 @objc public var session: DDRUMErrorEventDDSession?
public class DDRUMErrorEventDDSession: NSObject
 @objc public var plan: DDRUMErrorEventDDSessionPlan
public enum DDRUMErrorEventDDSessionPlan: Int
 case plan1
 case plan2
public class DDRUMErrorEventAction: NSObject
 @objc public var id: String
public class DDRUMErrorEventApplication: NSObject
 @objc public var id: String
public class DDRUMErrorEventRUMConnectivity: NSObject
 @objc public var cellular: DDRUMErrorEventRUMConnectivityCellular?
 @objc public var interfaces: [Int]
 @objc public var status: DDRUMErrorEventRUMConnectivityStatus
public class DDRUMErrorEventRUMConnectivityCellular: NSObject
 @objc public var carrierName: String?
 @objc public var technology: String?
public enum DDRUMErrorEventRUMConnectivityInterfaces: Int
 case bluetooth
 case cellular
 case ethernet
 case wifi
 case wimax
 case mixed
 case other
 case unknown
 case none
public enum DDRUMErrorEventRUMConnectivityStatus: Int
 case connected
 case notConnected
 case maybe
public class DDRUMErrorEventRUMEventAttributes: NSObject
 @objc public var contextInfo: [String: Any]
public class DDRUMErrorEventError: NSObject
 @objc public var handling: DDRUMErrorEventErrorHandling
 @objc public var handlingStack: String?
 @objc public var id: String?
 @objc public var isCrash: NSNumber?
 @objc public var message: String
 @objc public var resource: DDRUMErrorEventErrorResource?
 @objc public var source: DDRUMErrorEventErrorSource
 @objc public var stack: String?
 @objc public var type: String?
public enum DDRUMErrorEventErrorHandling: Int
 case none
 case handled
 case unhandled
public class DDRUMErrorEventErrorResource: NSObject
 @objc public var method: DDRUMErrorEventErrorResourceRUMMethod
 @objc public var provider: DDRUMErrorEventErrorResourceProvider?
 @objc public var statusCode: NSNumber
 @objc public var url: String
public enum DDRUMErrorEventErrorResourceRUMMethod: Int
 case post
 case get
 case head
 case put
 case delete
 case patch
public class DDRUMErrorEventErrorResourceProvider: NSObject
 @objc public var domain: String?
 @objc public var name: String?
 @objc public var type: DDRUMErrorEventErrorResourceProviderProviderType
public enum DDRUMErrorEventErrorResourceProviderProviderType: Int
 case none
 case ad
 case advertising
 case analytics
 case cdn
 case content
 case customerSuccess
 case firstParty
 case hosting
 case marketing
 case other
 case social
 case tagManager
 case utility
 case video
public enum DDRUMErrorEventErrorSource: Int
 case network
 case source
 case console
 case logger
 case agent
 case webview
 case custom
public class DDRUMErrorEventSession: NSObject
 @objc public var hasReplay: NSNumber?
 @objc public var id: String
 @objc public var type: DDRUMErrorEventSessionSessionType
public enum DDRUMErrorEventSessionSessionType: Int
 case user
 case synthetics
public class DDRUMErrorEventSynthetics: NSObject
 @objc public var resultId: String
 @objc public var testId: String
public class DDRUMErrorEventRUMUser: NSObject
 @objc public var email: String?
 @objc public var id: String?
 @objc public var name: String?
 @objc public var usrInfo: [String: Any]
public class DDRUMErrorEventView: NSObject
 @objc public var id: String
 @objc public var inForeground: NSNumber?
 @objc public var name: String?
 @objc public var referrer: String?
 @objc public var url: String
public class DDRUMLongTaskEvent: NSObject
 @objc public var dd: DDRUMLongTaskEventDD
 @objc public var action: DDRUMLongTaskEventAction?
 @objc public var application: DDRUMLongTaskEventApplication
 @objc public var connectivity: DDRUMLongTaskEventRUMConnectivity?
 @objc public var context: DDRUMLongTaskEventRUMEventAttributes?
 @objc public var date: NSNumber
 @objc public var longTask: DDRUMLongTaskEventLongTask
 @objc public var service: String?
 @objc public var session: DDRUMLongTaskEventSession
 @objc public var synthetics: DDRUMLongTaskEventSynthetics?
 @objc public var type: String
 @objc public var usr: DDRUMLongTaskEventRUMUser?
 @objc public var view: DDRUMLongTaskEventView
public class DDRUMLongTaskEventDD: NSObject
 @objc public var formatVersion: NSNumber
 @objc public var session: DDRUMLongTaskEventDDSession?
public class DDRUMLongTaskEventDDSession: NSObject
 @objc public var plan: DDRUMLongTaskEventDDSessionPlan
public enum DDRUMLongTaskEventDDSessionPlan: Int
 case plan1
 case plan2
public class DDRUMLongTaskEventAction: NSObject
 @objc public var id: String
public class DDRUMLongTaskEventApplication: NSObject
 @objc public var id: String
public class DDRUMLongTaskEventRUMConnectivity: NSObject
 @objc public var cellular: DDRUMLongTaskEventRUMConnectivityCellular?
 @objc public var interfaces: [Int]
 @objc public var status: DDRUMLongTaskEventRUMConnectivityStatus
public class DDRUMLongTaskEventRUMConnectivityCellular: NSObject
 @objc public var carrierName: String?
 @objc public var technology: String?
public enum DDRUMLongTaskEventRUMConnectivityInterfaces: Int
 case bluetooth
 case cellular
 case ethernet
 case wifi
 case wimax
 case mixed
 case other
 case unknown
 case none
public enum DDRUMLongTaskEventRUMConnectivityStatus: Int
 case connected
 case notConnected
 case maybe
public class DDRUMLongTaskEventRUMEventAttributes: NSObject
 @objc public var contextInfo: [String: Any]
public class DDRUMLongTaskEventLongTask: NSObject
 @objc public var duration: NSNumber
 @objc public var id: String?
 @objc public var isFrozenFrame: NSNumber?
public class DDRUMLongTaskEventSession: NSObject
 @objc public var hasReplay: NSNumber?
 @objc public var id: String
 @objc public var type: DDRUMLongTaskEventSessionSessionType
public enum DDRUMLongTaskEventSessionSessionType: Int
 case user
 case synthetics
public class DDRUMLongTaskEventSynthetics: NSObject
 @objc public var resultId: String
 @objc public var testId: String
public class DDRUMLongTaskEventRUMUser: NSObject
 @objc public var email: String?
 @objc public var id: String?
 @objc public var name: String?
 @objc public var usrInfo: [String: Any]
public class DDRUMLongTaskEventView: NSObject
 @objc public var id: String
 @objc public var name: String?
 @objc public var referrer: String?
 @objc public var url: String
public class DDRUMView: NSObject
 @objc public var name: String
 @objc public var attributes: [String: Any]
 public init(name: String, attributes: [String: Any])
public protocol DDUIKitRUMViewsPredicate: AnyObject
 func rumView(for viewController: UIViewController) -> DDRUMView?
public class DDRUMAction: NSObject
 @objc public var name: String
 @objc public var attributes: [String: Any]
 public init(name: String, attributes: [String: Any])
public protocol DDUIKitRUMUserActionsPredicate: AnyObject
 func rumAction(targetView: UIView) -> DDRUMAction?
public enum DDRUMErrorSource: Int
 case source
 case network
 case webview
 case console
 case custom
public enum DDRUMUserActionType: Int
 case tap
 case scroll
 case swipe
 case custom
public enum DDRUMResourceType: Int
 case image
 case xhr
 case beacon
 case css
 case document
 case fetch
 case font
 case js
 case media
 case other
 case native
public enum DDRUMMethod: Int
 case post
 case get
 case head
 case put
 case delete
 case patch
public class DDRUMMonitor: NSObject
 override public convenience init()
 public func startView(viewController: UIViewController,name: String?,attributes: [String: Any])
 public func stopView(viewController: UIViewController,attributes: [String: Any])
 public func startView(key: String,name: String?,attributes: [String: Any])
 public func stopView(key: String,attributes: [String: Any])
 public func addTiming(name: String)
 public func addError(message: String,source: DDRUMErrorSource,stack: String?,attributes: [String: Any])
 public func addError(error: Error,source: DDRUMErrorSource,attributes: [String: Any])
 public func startResourceLoading(resourceKey: String,request: URLRequest,attributes: [String: Any])
 public func startResourceLoading(resourceKey: String,url: URL,attributes: [String: Any])
 public func startResourceLoading(resourceKey: String,httpMethod: DDRUMMethod,urlString: String,attributes: [String: Any])
 public func addResourceMetrics(resourceKey: String,metrics: URLSessionTaskMetrics,attributes: [String: Any])
 public func stopResourceLoading(resourceKey: String,response: URLResponse,size: NSNumber?,attributes: [String: Any])
 public func stopResourceLoading(resourceKey: String,statusCode: NSNumber?,kind: DDRUMResourceType,size: NSNumber?,attributes: [String: Any])
 public func stopResourceLoadingWithError(resourceKey: String,error: Error,response: URLResponse?,attributes: [String: Any])
 public func stopResourceLoadingWithError(resourceKey: String,errorMessage: String,response: URLResponse?,attributes: [String: Any])
 public func startUserAction(type: DDRUMUserActionType,name: String,attributes: [String: Any])
 public func stopUserAction(type: DDRUMUserActionType,name: String?,attributes: [String: Any])
 public func addUserAction(type: DDRUMUserActionType,name: String,attributes: [String: Any])
 public func addAttribute(forKey key: String,value: Any)
 public func removeAttribute(forKey key: String)
public class DDTracer: NSObject, DatadogObjc.OTTracer
 public static func initialize(configuration: DDTracerConfiguration) -> DatadogObjc.OTTracer
 public convenience init(configuration: DDTracerConfiguration)
 public func startSpan(_ operationName: String) -> OTSpan
 public func startSpan(_ operationName: String, tags: NSDictionary?) -> OTSpan
 public func startSpan(_ operationName: String, childOf parent: OTSpanContext?) -> OTSpan
 public func startSpan(_ operationName: String,childOf parent: OTSpanContext?,tags: NSDictionary?) -> OTSpan
 public func startSpan(_ operationName: String,childOf parent: OTSpanContext?,tags: NSDictionary?,startTime: Date?) -> OTSpan
 public func inject(_ spanContext: OTSpanContext, format: String, carrier: Any) throws
 public func extractWithFormat(_ format: String, carrier: Any) throws
public class DDTracerConfiguration: NSObject
 override public init()
 public func set(serviceName: String)
 public func sendNetworkInfo(_ enabled: Bool)
public class DDHTTPHeadersWriter: NSObject
 @objc public var tracePropagationHTTPHeaders: [String: String]
 override public init()
