---
format_version: '8'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: other

# To customize how workflows are run on different triggers,
# go to Workflow Editor on Bitrise.io.

workflows:
  push_to_any_branch:
    after_run:
    # - _make_dependencies
    - run_linter
    # - run_unit_tests
    # - run_integration_tests
    # - run_ui_tests
    # - check_dependency_managers
    # - _deploy_artifacts

  _make_dependencies:
    description: |-
        Does `make dependencies` to prepare source code in repo for building and testing.
    steps:
    - script@1.1.6:
        title: Do `make dependencies`.
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            make dependencies

  _deploy_artifacts:
    description: |-
        Uploads artifacts to associate them with build log on Bitrise.io.
    steps:
    - deploy-to-bitrise-io: {}

  run_linter:
    description: |-
        Runs swiftlint and license check for all source and test files.
    steps:
    - swiftlint@0.7.0:
        title: Lint Sources/*
        inputs:
        - strict: 'yes'
        - lint_config_file: "$BITRISE_SOURCE_DIR/tools/lint/sources.swiftlint.yml"
        - linting_path: "$BITRISE_SOURCE_DIR"
        - reporter: emoji
    - swiftlint@0.7.0:
        title: Lint Tests/*
        is_always_run: true
        inputs:
        - strict: 'yes'
        - linting_path: "$BITRISE_SOURCE_DIR"
        - lint_config_file: "$BITRISE_SOURCE_DIR/tools/lint/tests.swiftlint.yml"
        - reporter: emoji
    - script@1.1.6:
        title: Check license headers
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            ./tools/license/check-license.sh

  run_unit_tests:
    description: |-
        Runs unit tests for SDK on iOS Simulator.
        Runs benchmarks for SDK on iOS Simulator.
        Runs unit tests for HTTPServerMock package on macOS.
    steps:
    - xcode-test@2.4.5:
        title: Run unit tests for Datadog - iOS Simulator
        inputs:
        - scheme: Datadog
        - simulator_device: iPhone 11
        - is_clean_build: 'yes'
        - generate_code_coverage_files: 'yes'
        - project_path: Datadog.xcworkspace
        - xcpretty_test_options: --color --report html --output "${BITRISE_DEPLOY_DIR}/Unit-tests.html"
    - xcode-test:
        title: Run benchmarks - DatadogBenchmarkTests on iOS Simulator
        inputs:
        - scheme: DatadogBenchmarkTests
        - simulator_device: iPhone 11
        - should_build_before_test: 'no'
        - is_clean_build: 'no'
        - generate_code_coverage_files: 'yes'
        - project_path: Datadog.xcworkspace
        - xcpretty_test_options: --color --report html --output "${BITRISE_DEPLOY_DIR}/Benchmark-tests.html"
    - script@1.1.6:
        title: Generate HTTPServerMock.xcodeproj
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            make xcodeproj-httpservermock
    - xcode-test-mac:
        title: Run unit tests for HTTPServerMock.xcodeproj - macOS
        inputs:
        - scheme: HTTPServerMock-Package
        - destination: platform=OS X,arch=x86_64
        - project_path: instrumented-tests/http-server-mock/HTTPServerMock.xcodeproj

  run_ui_tests:
    description: |-
        Runs UI tests for Shopist app on iOS Simulator.
    steps:
    - script@1.1.6:
        title: Generate client token for Shopist
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            echo 'DATADOG_CLIENT_TOKEN="fake-client-token-for-shopist"' > xcconfigs/Datadog.local.xcconfig
    - xcode-test@2.4.5:
        title: Run UI tests for Shopist - iOS Simulator
        inputs:
        - scheme: Shopist
        - simulator_device: iPhone 11
        - generate_code_coverage_files: 'yes'
        - project_path: Shopist/Shopist.xcodeproj
        - xcpretty_test_options: --color --report html --output "${BITRISE_DEPLOY_DIR}/Shopist-UI-tests.html"

  run_integration_tests:
    description: |-
        Runs integration tests from Datadog.xcworkspace.
    steps:
    - xcode-test:
        title: Run integration tests - DatadogIntegrationTests on iOS Simulator
        inputs:
        - scheme: DatadogIntegrationTests
        - simulator_device: iPhone 11
        - should_build_before_test: 'no'
        - is_clean_build: 'no'
        - generate_code_coverage_files: 'yes'
        - project_path: Datadog.xcworkspace
        - xcpretty_test_options: --color --report html --output "${BITRISE_DEPLOY_DIR}/Integration-tests.html"

  check_dependency_managers:
    description: |-
        Uses supported dependency managers to fetch, install and link the SDK
        to test projects.
    steps:
    - script@1.1.6:
        title: Test SPM compatibility
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            make test-spm ci=true
    - xcode-test:
        title: Run SPMProject tests
        inputs:
        - scheme: SPMProject
        - is_clean_build: 'yes'
        - cache_level: none
        - project_path: "$BITRISE_SOURCE_DIR/dependency-manager-tests/spm/SPMProject.xcodeproj"
        - xcpretty_test_options: --color --report html --output "${BITRISE_DEPLOY_DIR}/SPMProject-tests.html"
    - script@1.1.6:
        title: Test Carthage compatibility
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            make test-carthage ci=true
    - xcode-test:
        title: Run CTProject tests
        inputs:
        - scheme: CTProject
        - is_clean_build: 'yes'
        - cache_level: none
        - project_path: "$BITRISE_SOURCE_DIR/dependency-manager-tests/carthage/CTProject.xcodeproj"
        - xcpretty_test_options: --color --report html --output "${BITRISE_DEPLOY_DIR}/CTProject-tests.html"
    - script@1.1.6:
        title: Test Cocoapods compatibility
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            make test-cocoapods ci=true
    - xcode-test:
        title: Run CPProject tests
        inputs:
        - scheme: CPProject
        - is_clean_build: 'yes'
        - cache_level: none
        - project_path: "$BITRISE_SOURCE_DIR/dependency-manager-tests/cocoapods/CPProject.xcworkspace"
        - xcpretty_test_options: --color --report html --output "${BITRISE_DEPLOY_DIR}/CPProject-tests.html"
